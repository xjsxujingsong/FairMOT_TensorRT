// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx_ONNX_NAMESPACE-ml.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto

#include "onnx_pb.h"
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto ONNX_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ONNX_API TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern ONNX_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
namespace ONNX_NAMESPACE {
class AttributeProto;
class AttributeProtoDefaultTypeInternal;
ONNX_API extern AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
class GraphProto;
class GraphProtoDefaultTypeInternal;
ONNX_API extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
class ModelProto;
class ModelProtoDefaultTypeInternal;
ONNX_API extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class NodeProto;
class NodeProtoDefaultTypeInternal;
ONNX_API extern NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
class OperatorSetIdProto;
class OperatorSetIdProtoDefaultTypeInternal;
ONNX_API extern OperatorSetIdProtoDefaultTypeInternal _OperatorSetIdProto_default_instance_;
class SparseTensorProto;
class SparseTensorProtoDefaultTypeInternal;
ONNX_API extern SparseTensorProtoDefaultTypeInternal _SparseTensorProto_default_instance_;
class StringStringEntryProto;
class StringStringEntryProtoDefaultTypeInternal;
ONNX_API extern StringStringEntryProtoDefaultTypeInternal _StringStringEntryProto_default_instance_;
class TensorAnnotation;
class TensorAnnotationDefaultTypeInternal;
ONNX_API extern TensorAnnotationDefaultTypeInternal _TensorAnnotation_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
ONNX_API extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorProto_Segment;
class TensorProto_SegmentDefaultTypeInternal;
ONNX_API extern TensorProto_SegmentDefaultTypeInternal _TensorProto_Segment_default_instance_;
class TensorShapeProto;
class TensorShapeProtoDefaultTypeInternal;
ONNX_API extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dimension;
class TensorShapeProto_DimensionDefaultTypeInternal;
ONNX_API extern TensorShapeProto_DimensionDefaultTypeInternal _TensorShapeProto_Dimension_default_instance_;
class TypeProto;
class TypeProtoDefaultTypeInternal;
ONNX_API extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
class TypeProto_Map;
class TypeProto_MapDefaultTypeInternal;
ONNX_API extern TypeProto_MapDefaultTypeInternal _TypeProto_Map_default_instance_;
class TypeProto_Opaque;
class TypeProto_OpaqueDefaultTypeInternal;
ONNX_API extern TypeProto_OpaqueDefaultTypeInternal _TypeProto_Opaque_default_instance_;
class TypeProto_Sequence;
class TypeProto_SequenceDefaultTypeInternal;
ONNX_API extern TypeProto_SequenceDefaultTypeInternal _TypeProto_Sequence_default_instance_;
class TypeProto_SparseTensor;
class TypeProto_SparseTensorDefaultTypeInternal;
ONNX_API extern TypeProto_SparseTensorDefaultTypeInternal _TypeProto_SparseTensor_default_instance_;
class TypeProto_Tensor;
class TypeProto_TensorDefaultTypeInternal;
ONNX_API extern TypeProto_TensorDefaultTypeInternal _TypeProto_Tensor_default_instance_;
class ValueInfoProto;
class ValueInfoProtoDefaultTypeInternal;
ONNX_API extern ValueInfoProtoDefaultTypeInternal _ValueInfoProto_default_instance_;
}  // namespace ONNX_NAMESPACE
PROTOBUF_NAMESPACE_OPEN
template<> ONNX_API ::ONNX_NAMESPACE::AttributeProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::AttributeProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::GraphProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::GraphProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::ModelProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::ModelProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::NodeProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::NodeProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::OperatorSetIdProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::OperatorSetIdProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::SparseTensorProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::SparseTensorProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::StringStringEntryProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::StringStringEntryProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TensorAnnotation* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TensorAnnotation>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TensorProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TensorProto_Segment* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto_Segment>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TensorShapeProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TensorShapeProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TensorShapeProto_Dimension* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TensorShapeProto_Dimension>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto_Map* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto_Map>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto_Opaque* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto_Opaque>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto_Sequence* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto_Sequence>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto_SparseTensor* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto_SparseTensor>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::TypeProto_Tensor* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto_Tensor>(Arena*);
template<> ONNX_API ::ONNX_NAMESPACE::ValueInfoProto* Arena::CreateMaybeMessage<::ONNX_NAMESPACE::ValueInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ONNX_NAMESPACE {

enum AttributeProto_AttributeType : int {
  AttributeProto_AttributeType_UNDEFINED = 0,
  AttributeProto_AttributeType_FLOAT = 1,
  AttributeProto_AttributeType_INT = 2,
  AttributeProto_AttributeType_STRING = 3,
  AttributeProto_AttributeType_TENSOR = 4,
  AttributeProto_AttributeType_GRAPH = 5,
  AttributeProto_AttributeType_SPARSE_TENSOR = 11,
  AttributeProto_AttributeType_FLOATS = 6,
  AttributeProto_AttributeType_INTS = 7,
  AttributeProto_AttributeType_STRINGS = 8,
  AttributeProto_AttributeType_TENSORS = 9,
  AttributeProto_AttributeType_GRAPHS = 10,
  AttributeProto_AttributeType_SPARSE_TENSORS = 12
};
ONNX_API bool AttributeProto_AttributeType_IsValid(int value);
constexpr AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MIN = AttributeProto_AttributeType_UNDEFINED;
constexpr AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MAX = AttributeProto_AttributeType_SPARSE_TENSORS;
constexpr int AttributeProto_AttributeType_AttributeType_ARRAYSIZE = AttributeProto_AttributeType_AttributeType_MAX + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeProto_AttributeType_descriptor();
template<typename T>
inline const std::string& AttributeProto_AttributeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttributeProto_AttributeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttributeProto_AttributeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttributeProto_AttributeType_descriptor(), enum_t_value);
}
inline bool AttributeProto_AttributeType_Parse(
    const std::string& name, AttributeProto_AttributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttributeProto_AttributeType>(
    AttributeProto_AttributeType_descriptor(), name, value);
}
enum TensorProto_DataType : int {
  TensorProto_DataType_UNDEFINED = 0,
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_UINT8 = 2,
  TensorProto_DataType_INT8 = 3,
  TensorProto_DataType_UINT16 = 4,
  TensorProto_DataType_INT16 = 5,
  TensorProto_DataType_INT32 = 6,
  TensorProto_DataType_INT64 = 7,
  TensorProto_DataType_STRING = 8,
  TensorProto_DataType_BOOL = 9,
  TensorProto_DataType_FLOAT16 = 10,
  TensorProto_DataType_DOUBLE = 11,
  TensorProto_DataType_UINT32 = 12,
  TensorProto_DataType_UINT64 = 13,
  TensorProto_DataType_COMPLEX64 = 14,
  TensorProto_DataType_COMPLEX128 = 15,
  TensorProto_DataType_BFLOAT16 = 16
};
ONNX_API bool TensorProto_DataType_IsValid(int value);
constexpr TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_UNDEFINED;
constexpr TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_BFLOAT16;
constexpr int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorProto_DataType_descriptor();
template<typename T>
inline const std::string& TensorProto_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TensorProto_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TensorProto_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), enum_t_value);
}
inline bool TensorProto_DataType_Parse(
    const std::string& name, TensorProto_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
enum TensorProto_DataLocation : int {
  TensorProto_DataLocation_DEFAULT = 0,
  TensorProto_DataLocation_EXTERNAL = 1
};
ONNX_API bool TensorProto_DataLocation_IsValid(int value);
constexpr TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MIN = TensorProto_DataLocation_DEFAULT;
constexpr TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MAX = TensorProto_DataLocation_EXTERNAL;
constexpr int TensorProto_DataLocation_DataLocation_ARRAYSIZE = TensorProto_DataLocation_DataLocation_MAX + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorProto_DataLocation_descriptor();
template<typename T>
inline const std::string& TensorProto_DataLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TensorProto_DataLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TensorProto_DataLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TensorProto_DataLocation_descriptor(), enum_t_value);
}
inline bool TensorProto_DataLocation_Parse(
    const std::string& name, TensorProto_DataLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TensorProto_DataLocation>(
    TensorProto_DataLocation_descriptor(), name, value);
}
enum Version : int {
  _START_VERSION = 0,
  IR_VERSION_2017_10_10 = 1,
  IR_VERSION_2017_10_30 = 2,
  IR_VERSION_2017_11_3 = 3,
  IR_VERSION_2019_1_22 = 4,
  IR_VERSION_2019_3_18 = 5,
  IR_VERSION = 6
};
ONNX_API bool Version_IsValid(int value);
constexpr Version Version_MIN = _START_VERSION;
constexpr Version Version_MAX = IR_VERSION;
constexpr int Version_ARRAYSIZE = Version_MAX + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Version_descriptor();
template<typename T>
inline const std::string& Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Version_descriptor(), enum_t_value);
}
inline bool Version_Parse(
    const std::string& name, Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
// ===================================================================

class ONNX_API AttributeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.AttributeProto) */ {
 public:
  AttributeProto();
  virtual ~AttributeProto();

  AttributeProto(const AttributeProto& from);
  AttributeProto(AttributeProto&& from) noexcept
    : AttributeProto() {
    *this = ::std::move(from);
  }

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeProto& operator=(AttributeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttributeProto& a, AttributeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeProto* New() const final {
    return CreateMaybeMessage<AttributeProto>(nullptr);
  }

  AttributeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeProto& from);
  void MergeFrom(const AttributeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.AttributeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttributeProto_AttributeType AttributeType;
  static constexpr AttributeType UNDEFINED =
    AttributeProto_AttributeType_UNDEFINED;
  static constexpr AttributeType FLOAT =
    AttributeProto_AttributeType_FLOAT;
  static constexpr AttributeType INT =
    AttributeProto_AttributeType_INT;
  static constexpr AttributeType STRING =
    AttributeProto_AttributeType_STRING;
  static constexpr AttributeType TENSOR =
    AttributeProto_AttributeType_TENSOR;
  static constexpr AttributeType GRAPH =
    AttributeProto_AttributeType_GRAPH;
  static constexpr AttributeType SPARSE_TENSOR =
    AttributeProto_AttributeType_SPARSE_TENSOR;
  static constexpr AttributeType FLOATS =
    AttributeProto_AttributeType_FLOATS;
  static constexpr AttributeType INTS =
    AttributeProto_AttributeType_INTS;
  static constexpr AttributeType STRINGS =
    AttributeProto_AttributeType_STRINGS;
  static constexpr AttributeType TENSORS =
    AttributeProto_AttributeType_TENSORS;
  static constexpr AttributeType GRAPHS =
    AttributeProto_AttributeType_GRAPHS;
  static constexpr AttributeType SPARSE_TENSORS =
    AttributeProto_AttributeType_SPARSE_TENSORS;
  static inline bool AttributeType_IsValid(int value) {
    return AttributeProto_AttributeType_IsValid(value);
  }
  static constexpr AttributeType AttributeType_MIN =
    AttributeProto_AttributeType_AttributeType_MIN;
  static constexpr AttributeType AttributeType_MAX =
    AttributeProto_AttributeType_AttributeType_MAX;
  static constexpr int AttributeType_ARRAYSIZE =
    AttributeProto_AttributeType_AttributeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AttributeType_descriptor() {
    return AttributeProto_AttributeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AttributeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AttributeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AttributeType_Name.");
    return AttributeProto_AttributeType_Name(enum_t_value);
  }
  static inline bool AttributeType_Parse(const std::string& name,
      AttributeType* value) {
    return AttributeProto_AttributeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFloatsFieldNumber = 7,
    kIntsFieldNumber = 8,
    kStringsFieldNumber = 9,
    kTensorsFieldNumber = 10,
    kGraphsFieldNumber = 11,
    kSparseTensorsFieldNumber = 23,
    kNameFieldNumber = 1,
    kSFieldNumber = 4,
    kDocStringFieldNumber = 13,
    kRefAttrNameFieldNumber = 21,
    kTFieldNumber = 5,
    kGFieldNumber = 6,
    kSparseTensorFieldNumber = 22,
    kIFieldNumber = 3,
    kFFieldNumber = 2,
    kTypeFieldNumber = 20,
  };
  // repeated float floats = 7;
  int floats_size() const;
  private:
  int _internal_floats_size() const;
  public:
  void clear_floats();
  private:
  float _internal_floats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floats() const;
  void _internal_add_floats(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floats();
  public:
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 8;
  int ints_size() const;
  private:
  int _internal_ints_size() const;
  public:
  void clear_ints();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_ints() const;
  void _internal_add_ints(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_ints();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 ints(int index) const;
  void set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ints(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ints();

  // repeated bytes strings = 9;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const void* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated .ONNX_NAMESPACE.TensorProto tensors = 10;
  int tensors_size() const;
  private:
  int _internal_tensors_size() const;
  public:
  void clear_tensors();
  ::ONNX_NAMESPACE::TensorProto* mutable_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >*
      mutable_tensors();
  private:
  const ::ONNX_NAMESPACE::TensorProto& _internal_tensors(int index) const;
  ::ONNX_NAMESPACE::TensorProto* _internal_add_tensors();
  public:
  const ::ONNX_NAMESPACE::TensorProto& tensors(int index) const;
  ::ONNX_NAMESPACE::TensorProto* add_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >&
      tensors() const;

  // repeated .ONNX_NAMESPACE.GraphProto graphs = 11;
  int graphs_size() const;
  private:
  int _internal_graphs_size() const;
  public:
  void clear_graphs();
  ::ONNX_NAMESPACE::GraphProto* mutable_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::GraphProto >*
      mutable_graphs();
  private:
  const ::ONNX_NAMESPACE::GraphProto& _internal_graphs(int index) const;
  ::ONNX_NAMESPACE::GraphProto* _internal_add_graphs();
  public:
  const ::ONNX_NAMESPACE::GraphProto& graphs(int index) const;
  ::ONNX_NAMESPACE::GraphProto* add_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::GraphProto >&
      graphs() const;

  // repeated .ONNX_NAMESPACE.SparseTensorProto sparse_tensors = 23;
  int sparse_tensors_size() const;
  private:
  int _internal_sparse_tensors_size() const;
  public:
  void clear_sparse_tensors();
  ::ONNX_NAMESPACE::SparseTensorProto* mutable_sparse_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >*
      mutable_sparse_tensors();
  private:
  const ::ONNX_NAMESPACE::SparseTensorProto& _internal_sparse_tensors(int index) const;
  ::ONNX_NAMESPACE::SparseTensorProto* _internal_add_sparse_tensors();
  public:
  const ::ONNX_NAMESPACE::SparseTensorProto& sparse_tensors(int index) const;
  ::ONNX_NAMESPACE::SparseTensorProto* add_sparse_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >&
      sparse_tensors() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes s = 4;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // optional string doc_string = 13;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional string ref_attr_name = 21;
  bool has_ref_attr_name() const;
  private:
  bool _internal_has_ref_attr_name() const;
  public:
  void clear_ref_attr_name();
  const std::string& ref_attr_name() const;
  void set_ref_attr_name(const std::string& value);
  void set_ref_attr_name(std::string&& value);
  void set_ref_attr_name(const char* value);
  void set_ref_attr_name(const char* value, size_t size);
  std::string* mutable_ref_attr_name();
  std::string* release_ref_attr_name();
  void set_allocated_ref_attr_name(std::string* ref_attr_name);
  private:
  const std::string& _internal_ref_attr_name() const;
  void _internal_set_ref_attr_name(const std::string& value);
  std::string* _internal_mutable_ref_attr_name();
  public:

  // optional .ONNX_NAMESPACE.TensorProto t = 5;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::ONNX_NAMESPACE::TensorProto& t() const;
  ::ONNX_NAMESPACE::TensorProto* release_t();
  ::ONNX_NAMESPACE::TensorProto* mutable_t();
  void set_allocated_t(::ONNX_NAMESPACE::TensorProto* t);
  private:
  const ::ONNX_NAMESPACE::TensorProto& _internal_t() const;
  ::ONNX_NAMESPACE::TensorProto* _internal_mutable_t();
  public:

  // optional .ONNX_NAMESPACE.GraphProto g = 6;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  const ::ONNX_NAMESPACE::GraphProto& g() const;
  ::ONNX_NAMESPACE::GraphProto* release_g();
  ::ONNX_NAMESPACE::GraphProto* mutable_g();
  void set_allocated_g(::ONNX_NAMESPACE::GraphProto* g);
  private:
  const ::ONNX_NAMESPACE::GraphProto& _internal_g() const;
  ::ONNX_NAMESPACE::GraphProto* _internal_mutable_g();
  public:

  // optional .ONNX_NAMESPACE.SparseTensorProto sparse_tensor = 22;
  bool has_sparse_tensor() const;
  private:
  bool _internal_has_sparse_tensor() const;
  public:
  void clear_sparse_tensor();
  const ::ONNX_NAMESPACE::SparseTensorProto& sparse_tensor() const;
  ::ONNX_NAMESPACE::SparseTensorProto* release_sparse_tensor();
  ::ONNX_NAMESPACE::SparseTensorProto* mutable_sparse_tensor();
  void set_allocated_sparse_tensor(::ONNX_NAMESPACE::SparseTensorProto* sparse_tensor);
  private:
  const ::ONNX_NAMESPACE::SparseTensorProto& _internal_sparse_tensor() const;
  ::ONNX_NAMESPACE::SparseTensorProto* _internal_mutable_sparse_tensor();
  public:

  // optional int64 i = 3;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float f = 2;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // optional .ONNX_NAMESPACE.AttributeProto.AttributeType type = 20;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ONNX_NAMESPACE::AttributeProto_AttributeType type() const;
  void set_type(::ONNX_NAMESPACE::AttributeProto_AttributeType value);
  private:
  ::ONNX_NAMESPACE::AttributeProto_AttributeType _internal_type() const;
  void _internal_set_type(::ONNX_NAMESPACE::AttributeProto_AttributeType value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.AttributeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto > tensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::GraphProto > graphs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto > sparse_tensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_attr_name_;
  ::ONNX_NAMESPACE::TensorProto* t_;
  ::ONNX_NAMESPACE::GraphProto* g_;
  ::ONNX_NAMESPACE::SparseTensorProto* sparse_tensor_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
  float f_;
  int type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API ValueInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.ValueInfoProto) */ {
 public:
  ValueInfoProto();
  virtual ~ValueInfoProto();

  ValueInfoProto(const ValueInfoProto& from);
  ValueInfoProto(ValueInfoProto&& from) noexcept
    : ValueInfoProto() {
    *this = ::std::move(from);
  }

  inline ValueInfoProto& operator=(const ValueInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueInfoProto& operator=(ValueInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueInfoProto* internal_default_instance() {
    return reinterpret_cast<const ValueInfoProto*>(
               &_ValueInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValueInfoProto& a, ValueInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueInfoProto* New() const final {
    return CreateMaybeMessage<ValueInfoProto>(nullptr);
  }

  ValueInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueInfoProto& from);
  void MergeFrom(const ValueInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.ValueInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDocStringFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string doc_string = 3;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional .ONNX_NAMESPACE.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::ONNX_NAMESPACE::TypeProto& type() const;
  ::ONNX_NAMESPACE::TypeProto* release_type();
  ::ONNX_NAMESPACE::TypeProto* mutable_type();
  void set_allocated_type(::ONNX_NAMESPACE::TypeProto* type);
  private:
  const ::ONNX_NAMESPACE::TypeProto& _internal_type() const;
  ::ONNX_NAMESPACE::TypeProto* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.ValueInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::ONNX_NAMESPACE::TypeProto* type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API NodeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.NodeProto) */ {
 public:
  NodeProto();
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);
  NodeProto(NodeProto&& from) noexcept
    : NodeProto() {
    *this = ::std::move(from);
  }

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeProto& operator=(NodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeProto& a, NodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeProto* New() const final {
    return CreateMaybeMessage<NodeProto>(nullptr);
  }

  NodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.NodeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kAttributeFieldNumber = 5,
    kNameFieldNumber = 3,
    kOpTypeFieldNumber = 4,
    kDocStringFieldNumber = 6,
    kDomainFieldNumber = 7,
  };
  // repeated string input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // repeated string output = 2;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // repeated .ONNX_NAMESPACE.AttributeProto attribute = 5;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::ONNX_NAMESPACE::AttributeProto* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::AttributeProto >*
      mutable_attribute();
  private:
  const ::ONNX_NAMESPACE::AttributeProto& _internal_attribute(int index) const;
  ::ONNX_NAMESPACE::AttributeProto* _internal_add_attribute();
  public:
  const ::ONNX_NAMESPACE::AttributeProto& attribute(int index) const;
  ::ONNX_NAMESPACE::AttributeProto* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::AttributeProto >&
      attribute() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string op_type = 4;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // optional string doc_string = 6;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional string domain = 7;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.NodeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::AttributeProto > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API ModelProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.ModelProto) */ {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelProto* New() const final {
    return CreateMaybeMessage<ModelProto>(nullptr);
  }

  ModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.ModelProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsetImportFieldNumber = 8,
    kMetadataPropsFieldNumber = 14,
    kProducerNameFieldNumber = 2,
    kProducerVersionFieldNumber = 3,
    kDomainFieldNumber = 4,
    kDocStringFieldNumber = 6,
    kGraphFieldNumber = 7,
    kIrVersionFieldNumber = 1,
    kModelVersionFieldNumber = 5,
  };
  // repeated .ONNX_NAMESPACE.OperatorSetIdProto opset_import = 8;
  int opset_import_size() const;
  private:
  int _internal_opset_import_size() const;
  public:
  void clear_opset_import();
  ::ONNX_NAMESPACE::OperatorSetIdProto* mutable_opset_import(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::OperatorSetIdProto >*
      mutable_opset_import();
  private:
  const ::ONNX_NAMESPACE::OperatorSetIdProto& _internal_opset_import(int index) const;
  ::ONNX_NAMESPACE::OperatorSetIdProto* _internal_add_opset_import();
  public:
  const ::ONNX_NAMESPACE::OperatorSetIdProto& opset_import(int index) const;
  ::ONNX_NAMESPACE::OperatorSetIdProto* add_opset_import();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::OperatorSetIdProto >&
      opset_import() const;

  // repeated .ONNX_NAMESPACE.StringStringEntryProto metadata_props = 14;
  int metadata_props_size() const;
  private:
  int _internal_metadata_props_size() const;
  public:
  void clear_metadata_props();
  ::ONNX_NAMESPACE::StringStringEntryProto* mutable_metadata_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
      mutable_metadata_props();
  private:
  const ::ONNX_NAMESPACE::StringStringEntryProto& _internal_metadata_props(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* _internal_add_metadata_props();
  public:
  const ::ONNX_NAMESPACE::StringStringEntryProto& metadata_props(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* add_metadata_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
      metadata_props() const;

  // optional string producer_name = 2;
  bool has_producer_name() const;
  private:
  bool _internal_has_producer_name() const;
  public:
  void clear_producer_name();
  const std::string& producer_name() const;
  void set_producer_name(const std::string& value);
  void set_producer_name(std::string&& value);
  void set_producer_name(const char* value);
  void set_producer_name(const char* value, size_t size);
  std::string* mutable_producer_name();
  std::string* release_producer_name();
  void set_allocated_producer_name(std::string* producer_name);
  private:
  const std::string& _internal_producer_name() const;
  void _internal_set_producer_name(const std::string& value);
  std::string* _internal_mutable_producer_name();
  public:

  // optional string producer_version = 3;
  bool has_producer_version() const;
  private:
  bool _internal_has_producer_version() const;
  public:
  void clear_producer_version();
  const std::string& producer_version() const;
  void set_producer_version(const std::string& value);
  void set_producer_version(std::string&& value);
  void set_producer_version(const char* value);
  void set_producer_version(const char* value, size_t size);
  std::string* mutable_producer_version();
  std::string* release_producer_version();
  void set_allocated_producer_version(std::string* producer_version);
  private:
  const std::string& _internal_producer_version() const;
  void _internal_set_producer_version(const std::string& value);
  std::string* _internal_mutable_producer_version();
  public:

  // optional string domain = 4;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string doc_string = 6;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional .ONNX_NAMESPACE.GraphProto graph = 7;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::ONNX_NAMESPACE::GraphProto& graph() const;
  ::ONNX_NAMESPACE::GraphProto* release_graph();
  ::ONNX_NAMESPACE::GraphProto* mutable_graph();
  void set_allocated_graph(::ONNX_NAMESPACE::GraphProto* graph);
  private:
  const ::ONNX_NAMESPACE::GraphProto& _internal_graph() const;
  ::ONNX_NAMESPACE::GraphProto* _internal_mutable_graph();
  public:

  // optional int64 ir_version = 1;
  bool has_ir_version() const;
  private:
  bool _internal_has_ir_version() const;
  public:
  void clear_ir_version();
  ::PROTOBUF_NAMESPACE_ID::int64 ir_version() const;
  void set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ir_version() const;
  void _internal_set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 model_version = 5;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  ::PROTOBUF_NAMESPACE_ID::int64 model_version() const;
  void set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_model_version() const;
  void _internal_set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.ModelProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::OperatorSetIdProto > opset_import_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto > metadata_props_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::ONNX_NAMESPACE::GraphProto* graph_;
  ::PROTOBUF_NAMESPACE_ID::int64 ir_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 model_version_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API StringStringEntryProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.StringStringEntryProto) */ {
 public:
  StringStringEntryProto();
  virtual ~StringStringEntryProto();

  StringStringEntryProto(const StringStringEntryProto& from);
  StringStringEntryProto(StringStringEntryProto&& from) noexcept
    : StringStringEntryProto() {
    *this = ::std::move(from);
  }

  inline StringStringEntryProto& operator=(const StringStringEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringStringEntryProto& operator=(StringStringEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringStringEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringStringEntryProto* internal_default_instance() {
    return reinterpret_cast<const StringStringEntryProto*>(
               &_StringStringEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringStringEntryProto& a, StringStringEntryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StringStringEntryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringStringEntryProto* New() const final {
    return CreateMaybeMessage<StringStringEntryProto>(nullptr);
  }

  StringStringEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringStringEntryProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringStringEntryProto& from);
  void MergeFrom(const StringStringEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringStringEntryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.StringStringEntryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.StringStringEntryProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TensorAnnotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TensorAnnotation) */ {
 public:
  TensorAnnotation();
  virtual ~TensorAnnotation();

  TensorAnnotation(const TensorAnnotation& from);
  TensorAnnotation(TensorAnnotation&& from) noexcept
    : TensorAnnotation() {
    *this = ::std::move(from);
  }

  inline TensorAnnotation& operator=(const TensorAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorAnnotation& operator=(TensorAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorAnnotation* internal_default_instance() {
    return reinterpret_cast<const TensorAnnotation*>(
               &_TensorAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TensorAnnotation& a, TensorAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorAnnotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorAnnotation* New() const final {
    return CreateMaybeMessage<TensorAnnotation>(nullptr);
  }

  TensorAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorAnnotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorAnnotation& from);
  void MergeFrom(const TensorAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorAnnotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TensorAnnotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantParameterTensorNamesFieldNumber = 2,
    kTensorNameFieldNumber = 1,
  };
  // repeated .ONNX_NAMESPACE.StringStringEntryProto quant_parameter_tensor_names = 2;
  int quant_parameter_tensor_names_size() const;
  private:
  int _internal_quant_parameter_tensor_names_size() const;
  public:
  void clear_quant_parameter_tensor_names();
  ::ONNX_NAMESPACE::StringStringEntryProto* mutable_quant_parameter_tensor_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
      mutable_quant_parameter_tensor_names();
  private:
  const ::ONNX_NAMESPACE::StringStringEntryProto& _internal_quant_parameter_tensor_names(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* _internal_add_quant_parameter_tensor_names();
  public:
  const ::ONNX_NAMESPACE::StringStringEntryProto& quant_parameter_tensor_names(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* add_quant_parameter_tensor_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
      quant_parameter_tensor_names() const;

  // optional string tensor_name = 1;
  bool has_tensor_name() const;
  private:
  bool _internal_has_tensor_name() const;
  public:
  void clear_tensor_name();
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);
  private:
  const std::string& _internal_tensor_name() const;
  void _internal_set_tensor_name(const std::string& value);
  std::string* _internal_mutable_tensor_name();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TensorAnnotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto > quant_parameter_tensor_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API GraphProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.GraphProto) */ {
 public:
  GraphProto();
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const final {
    return CreateMaybeMessage<GraphProto>(nullptr);
  }

  GraphProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.GraphProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kInitializerFieldNumber = 5,
    kInputFieldNumber = 11,
    kOutputFieldNumber = 12,
    kValueInfoFieldNumber = 13,
    kQuantizationAnnotationFieldNumber = 14,
    kSparseInitializerFieldNumber = 15,
    kNameFieldNumber = 2,
    kDocStringFieldNumber = 10,
  };
  // repeated .ONNX_NAMESPACE.NodeProto node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::ONNX_NAMESPACE::NodeProto* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::NodeProto >*
      mutable_node();
  private:
  const ::ONNX_NAMESPACE::NodeProto& _internal_node(int index) const;
  ::ONNX_NAMESPACE::NodeProto* _internal_add_node();
  public:
  const ::ONNX_NAMESPACE::NodeProto& node(int index) const;
  ::ONNX_NAMESPACE::NodeProto* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::NodeProto >&
      node() const;

  // repeated .ONNX_NAMESPACE.TensorProto initializer = 5;
  int initializer_size() const;
  private:
  int _internal_initializer_size() const;
  public:
  void clear_initializer();
  ::ONNX_NAMESPACE::TensorProto* mutable_initializer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >*
      mutable_initializer();
  private:
  const ::ONNX_NAMESPACE::TensorProto& _internal_initializer(int index) const;
  ::ONNX_NAMESPACE::TensorProto* _internal_add_initializer();
  public:
  const ::ONNX_NAMESPACE::TensorProto& initializer(int index) const;
  ::ONNX_NAMESPACE::TensorProto* add_initializer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >&
      initializer() const;

  // repeated .ONNX_NAMESPACE.ValueInfoProto input = 11;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::ONNX_NAMESPACE::ValueInfoProto* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
      mutable_input();
  private:
  const ::ONNX_NAMESPACE::ValueInfoProto& _internal_input(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* _internal_add_input();
  public:
  const ::ONNX_NAMESPACE::ValueInfoProto& input(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
      input() const;

  // repeated .ONNX_NAMESPACE.ValueInfoProto output = 12;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::ONNX_NAMESPACE::ValueInfoProto* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
      mutable_output();
  private:
  const ::ONNX_NAMESPACE::ValueInfoProto& _internal_output(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* _internal_add_output();
  public:
  const ::ONNX_NAMESPACE::ValueInfoProto& output(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
      output() const;

  // repeated .ONNX_NAMESPACE.ValueInfoProto value_info = 13;
  int value_info_size() const;
  private:
  int _internal_value_info_size() const;
  public:
  void clear_value_info();
  ::ONNX_NAMESPACE::ValueInfoProto* mutable_value_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
      mutable_value_info();
  private:
  const ::ONNX_NAMESPACE::ValueInfoProto& _internal_value_info(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* _internal_add_value_info();
  public:
  const ::ONNX_NAMESPACE::ValueInfoProto& value_info(int index) const;
  ::ONNX_NAMESPACE::ValueInfoProto* add_value_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
      value_info() const;

  // repeated .ONNX_NAMESPACE.TensorAnnotation quantization_annotation = 14;
  int quantization_annotation_size() const;
  private:
  int _internal_quantization_annotation_size() const;
  public:
  void clear_quantization_annotation();
  ::ONNX_NAMESPACE::TensorAnnotation* mutable_quantization_annotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorAnnotation >*
      mutable_quantization_annotation();
  private:
  const ::ONNX_NAMESPACE::TensorAnnotation& _internal_quantization_annotation(int index) const;
  ::ONNX_NAMESPACE::TensorAnnotation* _internal_add_quantization_annotation();
  public:
  const ::ONNX_NAMESPACE::TensorAnnotation& quantization_annotation(int index) const;
  ::ONNX_NAMESPACE::TensorAnnotation* add_quantization_annotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorAnnotation >&
      quantization_annotation() const;

  // repeated .ONNX_NAMESPACE.SparseTensorProto sparse_initializer = 15;
  int sparse_initializer_size() const;
  private:
  int _internal_sparse_initializer_size() const;
  public:
  void clear_sparse_initializer();
  ::ONNX_NAMESPACE::SparseTensorProto* mutable_sparse_initializer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >*
      mutable_sparse_initializer();
  private:
  const ::ONNX_NAMESPACE::SparseTensorProto& _internal_sparse_initializer(int index) const;
  ::ONNX_NAMESPACE::SparseTensorProto* _internal_add_sparse_initializer();
  public:
  const ::ONNX_NAMESPACE::SparseTensorProto& sparse_initializer(int index) const;
  ::ONNX_NAMESPACE::SparseTensorProto* add_sparse_initializer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >&
      sparse_initializer() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string doc_string = 10;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.GraphProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::NodeProto > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto > initializer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto > output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto > value_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorAnnotation > quantization_annotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto > sparse_initializer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TensorProto_Segment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TensorProto.Segment) */ {
 public:
  TensorProto_Segment();
  virtual ~TensorProto_Segment();

  TensorProto_Segment(const TensorProto_Segment& from);
  TensorProto_Segment(TensorProto_Segment&& from) noexcept
    : TensorProto_Segment() {
    *this = ::std::move(from);
  }

  inline TensorProto_Segment& operator=(const TensorProto_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto_Segment& operator=(TensorProto_Segment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto_Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto_Segment* internal_default_instance() {
    return reinterpret_cast<const TensorProto_Segment*>(
               &_TensorProto_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TensorProto_Segment& a, TensorProto_Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto_Segment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto_Segment* New() const final {
    return CreateMaybeMessage<TensorProto_Segment>(nullptr);
  }

  TensorProto_Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto_Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto_Segment& from);
  void MergeFrom(const TensorProto_Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto_Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TensorProto.Segment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional int64 begin = 1;
  bool has_begin() const;
  private:
  bool _internal_has_begin() const;
  public:
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::int64 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TensorProto.Segment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 begin_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(nullptr);
  }

  TensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TensorProto_Segment Segment;

  typedef TensorProto_DataType DataType;
  static constexpr DataType UNDEFINED =
    TensorProto_DataType_UNDEFINED;
  static constexpr DataType FLOAT =
    TensorProto_DataType_FLOAT;
  static constexpr DataType UINT8 =
    TensorProto_DataType_UINT8;
  static constexpr DataType INT8 =
    TensorProto_DataType_INT8;
  static constexpr DataType UINT16 =
    TensorProto_DataType_UINT16;
  static constexpr DataType INT16 =
    TensorProto_DataType_INT16;
  static constexpr DataType INT32 =
    TensorProto_DataType_INT32;
  static constexpr DataType INT64 =
    TensorProto_DataType_INT64;
  static constexpr DataType STRING =
    TensorProto_DataType_STRING;
  static constexpr DataType BOOL =
    TensorProto_DataType_BOOL;
  static constexpr DataType FLOAT16 =
    TensorProto_DataType_FLOAT16;
  static constexpr DataType DOUBLE =
    TensorProto_DataType_DOUBLE;
  static constexpr DataType UINT32 =
    TensorProto_DataType_UINT32;
  static constexpr DataType UINT64 =
    TensorProto_DataType_UINT64;
  static constexpr DataType COMPLEX64 =
    TensorProto_DataType_COMPLEX64;
  static constexpr DataType COMPLEX128 =
    TensorProto_DataType_COMPLEX128;
  static constexpr DataType BFLOAT16 =
    TensorProto_DataType_BFLOAT16;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return TensorProto_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(const std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  typedef TensorProto_DataLocation DataLocation;
  static constexpr DataLocation DEFAULT =
    TensorProto_DataLocation_DEFAULT;
  static constexpr DataLocation EXTERNAL =
    TensorProto_DataLocation_EXTERNAL;
  static inline bool DataLocation_IsValid(int value) {
    return TensorProto_DataLocation_IsValid(value);
  }
  static constexpr DataLocation DataLocation_MIN =
    TensorProto_DataLocation_DataLocation_MIN;
  static constexpr DataLocation DataLocation_MAX =
    TensorProto_DataLocation_DataLocation_MAX;
  static constexpr int DataLocation_ARRAYSIZE =
    TensorProto_DataLocation_DataLocation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataLocation_descriptor() {
    return TensorProto_DataLocation_descriptor();
  }
  template<typename T>
  static inline const std::string& DataLocation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataLocation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataLocation_Name.");
    return TensorProto_DataLocation_Name(enum_t_value);
  }
  static inline bool DataLocation_Parse(const std::string& name,
      DataLocation* value) {
    return TensorProto_DataLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kFloatDataFieldNumber = 4,
    kInt32DataFieldNumber = 5,
    kStringDataFieldNumber = 6,
    kInt64DataFieldNumber = 7,
    kDoubleDataFieldNumber = 10,
    kUint64DataFieldNumber = 11,
    kExternalDataFieldNumber = 13,
    kNameFieldNumber = 8,
    kRawDataFieldNumber = 9,
    kDocStringFieldNumber = 12,
    kSegmentFieldNumber = 3,
    kDataTypeFieldNumber = 2,
    kDataLocationFieldNumber = 14,
  };
  // repeated int64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dims();

  // repeated float float_data = 4 [packed = true];
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 5 [packed = true];
  int int32_data_size() const;
  private:
  int _internal_int32_data_size() const;
  public:
  void clear_int32_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_data() const;
  void _internal_add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_data(int index) const;
  void set_int32_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_data();

  // repeated bytes string_data = 6;
  int string_data_size() const;
  private:
  int _internal_string_data_size() const;
  public:
  void clear_string_data();
  const std::string& string_data(int index) const;
  std::string* mutable_string_data(int index);
  void set_string_data(int index, const std::string& value);
  void set_string_data(int index, std::string&& value);
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const void* value, size_t size);
  std::string* add_string_data();
  void add_string_data(const std::string& value);
  void add_string_data(std::string&& value);
  void add_string_data(const char* value);
  void add_string_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_data();
  private:
  const std::string& _internal_string_data(int index) const;
  std::string* _internal_add_string_data();
  public:

  // repeated int64 int64_data = 7 [packed = true];
  int int64_data_size() const;
  private:
  int _internal_int64_data_size() const;
  public:
  void clear_int64_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_data() const;
  void _internal_add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_data(int index) const;
  void set_int64_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_data();

  // repeated double double_data = 10 [packed = true];
  int double_data_size() const;
  private:
  int _internal_double_data_size() const;
  public:
  void clear_double_data();
  private:
  double _internal_double_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_data() const;
  void _internal_add_double_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_data();
  public:
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_data();

  // repeated uint64 uint64_data = 11 [packed = true];
  int uint64_data_size() const;
  private:
  int _internal_uint64_data_size() const;
  public:
  void clear_uint64_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_data() const;
  void _internal_add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_data(int index) const;
  void set_uint64_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_data();

  // repeated .ONNX_NAMESPACE.StringStringEntryProto external_data = 13;
  int external_data_size() const;
  private:
  int _internal_external_data_size() const;
  public:
  void clear_external_data();
  ::ONNX_NAMESPACE::StringStringEntryProto* mutable_external_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
      mutable_external_data();
  private:
  const ::ONNX_NAMESPACE::StringStringEntryProto& _internal_external_data(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* _internal_add_external_data();
  public:
  const ::ONNX_NAMESPACE::StringStringEntryProto& external_data(int index) const;
  ::ONNX_NAMESPACE::StringStringEntryProto* add_external_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
      external_data() const;

  // optional string name = 8;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes raw_data = 9;
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  void set_raw_data(const std::string& value);
  void set_raw_data(std::string&& value);
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  std::string* mutable_raw_data();
  std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // optional string doc_string = 12;
  bool has_doc_string() const;
  private:
  bool _internal_has_doc_string() const;
  public:
  void clear_doc_string();
  const std::string& doc_string() const;
  void set_doc_string(const std::string& value);
  void set_doc_string(std::string&& value);
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  std::string* mutable_doc_string();
  std::string* release_doc_string();
  void set_allocated_doc_string(std::string* doc_string);
  private:
  const std::string& _internal_doc_string() const;
  void _internal_set_doc_string(const std::string& value);
  std::string* _internal_mutable_doc_string();
  public:

  // optional .ONNX_NAMESPACE.TensorProto.Segment segment = 3;
  bool has_segment() const;
  private:
  bool _internal_has_segment() const;
  public:
  void clear_segment();
  const ::ONNX_NAMESPACE::TensorProto_Segment& segment() const;
  ::ONNX_NAMESPACE::TensorProto_Segment* release_segment();
  ::ONNX_NAMESPACE::TensorProto_Segment* mutable_segment();
  void set_allocated_segment(::ONNX_NAMESPACE::TensorProto_Segment* segment);
  private:
  const ::ONNX_NAMESPACE::TensorProto_Segment& _internal_segment() const;
  ::ONNX_NAMESPACE::TensorProto_Segment* _internal_mutable_segment();
  public:

  // optional int32 data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ONNX_NAMESPACE.TensorProto.DataLocation data_location = 14;
  bool has_data_location() const;
  private:
  bool _internal_has_data_location() const;
  public:
  void clear_data_location();
  ::ONNX_NAMESPACE::TensorProto_DataLocation data_location() const;
  void set_data_location(::ONNX_NAMESPACE::TensorProto_DataLocation value);
  private:
  ::ONNX_NAMESPACE::TensorProto_DataLocation _internal_data_location() const;
  void _internal_set_data_location(::ONNX_NAMESPACE::TensorProto_DataLocation value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dims_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  mutable std::atomic<int> _float_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_data_;
  mutable std::atomic<int> _int32_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_data_;
  mutable std::atomic<int> _int64_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_data_;
  mutable std::atomic<int> _double_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_data_;
  mutable std::atomic<int> _uint64_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto > external_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_string_;
  ::ONNX_NAMESPACE::TensorProto_Segment* segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  int data_location_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API SparseTensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.SparseTensorProto) */ {
 public:
  SparseTensorProto();
  virtual ~SparseTensorProto();

  SparseTensorProto(const SparseTensorProto& from);
  SparseTensorProto(SparseTensorProto&& from) noexcept
    : SparseTensorProto() {
    *this = ::std::move(from);
  }

  inline SparseTensorProto& operator=(const SparseTensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseTensorProto& operator=(SparseTensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseTensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseTensorProto* internal_default_instance() {
    return reinterpret_cast<const SparseTensorProto*>(
               &_SparseTensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SparseTensorProto& a, SparseTensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseTensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseTensorProto* New() const final {
    return CreateMaybeMessage<SparseTensorProto>(nullptr);
  }

  SparseTensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseTensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseTensorProto& from);
  void MergeFrom(const SparseTensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseTensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.SparseTensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kValuesFieldNumber = 1,
    kIndicesFieldNumber = 2,
  };
  // repeated int64 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dims();

  // optional .ONNX_NAMESPACE.TensorProto values = 1;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::ONNX_NAMESPACE::TensorProto& values() const;
  ::ONNX_NAMESPACE::TensorProto* release_values();
  ::ONNX_NAMESPACE::TensorProto* mutable_values();
  void set_allocated_values(::ONNX_NAMESPACE::TensorProto* values);
  private:
  const ::ONNX_NAMESPACE::TensorProto& _internal_values() const;
  ::ONNX_NAMESPACE::TensorProto* _internal_mutable_values();
  public:

  // optional .ONNX_NAMESPACE.TensorProto indices = 2;
  bool has_indices() const;
  private:
  bool _internal_has_indices() const;
  public:
  void clear_indices();
  const ::ONNX_NAMESPACE::TensorProto& indices() const;
  ::ONNX_NAMESPACE::TensorProto* release_indices();
  ::ONNX_NAMESPACE::TensorProto* mutable_indices();
  void set_allocated_indices(::ONNX_NAMESPACE::TensorProto* indices);
  private:
  const ::ONNX_NAMESPACE::TensorProto& _internal_indices() const;
  ::ONNX_NAMESPACE::TensorProto* _internal_mutable_indices();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.SparseTensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dims_;
  ::ONNX_NAMESPACE::TensorProto* values_;
  ::ONNX_NAMESPACE::TensorProto* indices_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TensorShapeProto_Dimension :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TensorShapeProto.Dimension) */ {
 public:
  TensorShapeProto_Dimension();
  virtual ~TensorShapeProto_Dimension();

  TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from);
  TensorShapeProto_Dimension(TensorShapeProto_Dimension&& from) noexcept
    : TensorShapeProto_Dimension() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto_Dimension& operator=(const TensorShapeProto_Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto_Dimension& operator=(TensorShapeProto_Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto_Dimension& default_instance();

  enum ValueCase {
    kDimValue = 1,
    kDimParam = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto_Dimension* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dimension*>(
               &_TensorShapeProto_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TensorShapeProto_Dimension& a, TensorShapeProto_Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto_Dimension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto_Dimension* New() const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(nullptr);
  }

  TensorShapeProto_Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto_Dimension& from);
  void MergeFrom(const TensorShapeProto_Dimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto_Dimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TensorShapeProto.Dimension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenotationFieldNumber = 3,
    kDimValueFieldNumber = 1,
    kDimParamFieldNumber = 2,
  };
  // optional string denotation = 3;
  bool has_denotation() const;
  private:
  bool _internal_has_denotation() const;
  public:
  void clear_denotation();
  const std::string& denotation() const;
  void set_denotation(const std::string& value);
  void set_denotation(std::string&& value);
  void set_denotation(const char* value);
  void set_denotation(const char* value, size_t size);
  std::string* mutable_denotation();
  std::string* release_denotation();
  void set_allocated_denotation(std::string* denotation);
  private:
  const std::string& _internal_denotation() const;
  void _internal_set_denotation(const std::string& value);
  std::string* _internal_mutable_denotation();
  public:

  // optional int64 dim_value = 1;
  bool has_dim_value() const;
  private:
  bool _internal_has_dim_value() const;
  public:
  void clear_dim_value();
  ::PROTOBUF_NAMESPACE_ID::int64 dim_value() const;
  void set_dim_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dim_value() const;
  void _internal_set_dim_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional string dim_param = 2;
  bool has_dim_param() const;
  private:
  bool _internal_has_dim_param() const;
  public:
  void clear_dim_param();
  const std::string& dim_param() const;
  void set_dim_param(const std::string& value);
  void set_dim_param(std::string&& value);
  void set_dim_param(const char* value);
  void set_dim_param(const char* value, size_t size);
  std::string* mutable_dim_param();
  std::string* release_dim_param();
  void set_allocated_dim_param(std::string* dim_param);
  private:
  const std::string& _internal_dim_param() const;
  void _internal_set_dim_param(const std::string& value);
  std::string* _internal_mutable_dim_param();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TensorShapeProto.Dimension)
 private:
  class _Internal;
  void set_has_dim_value();
  void set_has_dim_param();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denotation_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 dim_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dim_param_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TensorShapeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TensorShapeProto) */ {
 public:
  TensorShapeProto();
  virtual ~TensorShapeProto();

  TensorShapeProto(const TensorShapeProto& from);
  TensorShapeProto(TensorShapeProto&& from) noexcept
    : TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto& operator=(TensorShapeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TensorShapeProto& a, TensorShapeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto* New() const final {
    return CreateMaybeMessage<TensorShapeProto>(nullptr);
  }

  TensorShapeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TensorShapeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dimension Dimension;

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated .ONNX_NAMESPACE.TensorShapeProto.Dimension dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  ::ONNX_NAMESPACE::TensorShapeProto_Dimension* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorShapeProto_Dimension >*
      mutable_dim();
  private:
  const ::ONNX_NAMESPACE::TensorShapeProto_Dimension& _internal_dim(int index) const;
  ::ONNX_NAMESPACE::TensorShapeProto_Dimension* _internal_add_dim();
  public:
  const ::ONNX_NAMESPACE::TensorShapeProto_Dimension& dim(int index) const;
  ::ONNX_NAMESPACE::TensorShapeProto_Dimension* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorShapeProto_Dimension >&
      dim() const;

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TensorShapeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorShapeProto_Dimension > dim_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto_Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto.Tensor) */ {
 public:
  TypeProto_Tensor();
  virtual ~TypeProto_Tensor();

  TypeProto_Tensor(const TypeProto_Tensor& from);
  TypeProto_Tensor(TypeProto_Tensor&& from) noexcept
    : TypeProto_Tensor() {
    *this = ::std::move(from);
  }

  inline TypeProto_Tensor& operator=(const TypeProto_Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Tensor& operator=(TypeProto_Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Tensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Tensor*>(
               &_TypeProto_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TypeProto_Tensor& a, TypeProto_Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Tensor* New() const final {
    return CreateMaybeMessage<TypeProto_Tensor>(nullptr);
  }

  TypeProto_Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Tensor& from);
  void MergeFrom(const TypeProto_Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kElemTypeFieldNumber = 1,
  };
  // optional .ONNX_NAMESPACE.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::ONNX_NAMESPACE::TensorShapeProto& shape() const;
  ::ONNX_NAMESPACE::TensorShapeProto* release_shape();
  ::ONNX_NAMESPACE::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::ONNX_NAMESPACE::TensorShapeProto* shape);
  private:
  const ::ONNX_NAMESPACE::TensorShapeProto& _internal_shape() const;
  ::ONNX_NAMESPACE::TensorShapeProto* _internal_mutable_shape();
  public:

  // optional int32 elem_type = 1;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type() const;
  void set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elem_type() const;
  void _internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto.Tensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ONNX_NAMESPACE::TensorShapeProto* shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto_Sequence :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto.Sequence) */ {
 public:
  TypeProto_Sequence();
  virtual ~TypeProto_Sequence();

  TypeProto_Sequence(const TypeProto_Sequence& from);
  TypeProto_Sequence(TypeProto_Sequence&& from) noexcept
    : TypeProto_Sequence() {
    *this = ::std::move(from);
  }

  inline TypeProto_Sequence& operator=(const TypeProto_Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Sequence& operator=(TypeProto_Sequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Sequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Sequence* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Sequence*>(
               &_TypeProto_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TypeProto_Sequence& a, TypeProto_Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Sequence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Sequence* New() const final {
    return CreateMaybeMessage<TypeProto_Sequence>(nullptr);
  }

  TypeProto_Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Sequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Sequence& from);
  void MergeFrom(const TypeProto_Sequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Sequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto.Sequence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemTypeFieldNumber = 1,
  };
  // optional .ONNX_NAMESPACE.TypeProto elem_type = 1;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  const ::ONNX_NAMESPACE::TypeProto& elem_type() const;
  ::ONNX_NAMESPACE::TypeProto* release_elem_type();
  ::ONNX_NAMESPACE::TypeProto* mutable_elem_type();
  void set_allocated_elem_type(::ONNX_NAMESPACE::TypeProto* elem_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto& _internal_elem_type() const;
  ::ONNX_NAMESPACE::TypeProto* _internal_mutable_elem_type();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto.Sequence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ONNX_NAMESPACE::TypeProto* elem_type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto_Map :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto.Map) */ {
 public:
  TypeProto_Map();
  virtual ~TypeProto_Map();

  TypeProto_Map(const TypeProto_Map& from);
  TypeProto_Map(TypeProto_Map&& from) noexcept
    : TypeProto_Map() {
    *this = ::std::move(from);
  }

  inline TypeProto_Map& operator=(const TypeProto_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Map& operator=(TypeProto_Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Map* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Map*>(
               &_TypeProto_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TypeProto_Map& a, TypeProto_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Map* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Map* New() const final {
    return CreateMaybeMessage<TypeProto_Map>(nullptr);
  }

  TypeProto_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Map& from);
  void MergeFrom(const TypeProto_Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto.Map";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueTypeFieldNumber = 2,
    kKeyTypeFieldNumber = 1,
  };
  // optional .ONNX_NAMESPACE.TypeProto value_type = 2;
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  const ::ONNX_NAMESPACE::TypeProto& value_type() const;
  ::ONNX_NAMESPACE::TypeProto* release_value_type();
  ::ONNX_NAMESPACE::TypeProto* mutable_value_type();
  void set_allocated_value_type(::ONNX_NAMESPACE::TypeProto* value_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto& _internal_value_type() const;
  ::ONNX_NAMESPACE::TypeProto* _internal_mutable_value_type();
  public:

  // optional int32 key_type = 1;
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  ::PROTOBUF_NAMESPACE_ID::int32 key_type() const;
  void set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_type() const;
  void _internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto.Map)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ONNX_NAMESPACE::TypeProto* value_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto_SparseTensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto.SparseTensor) */ {
 public:
  TypeProto_SparseTensor();
  virtual ~TypeProto_SparseTensor();

  TypeProto_SparseTensor(const TypeProto_SparseTensor& from);
  TypeProto_SparseTensor(TypeProto_SparseTensor&& from) noexcept
    : TypeProto_SparseTensor() {
    *this = ::std::move(from);
  }

  inline TypeProto_SparseTensor& operator=(const TypeProto_SparseTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_SparseTensor& operator=(TypeProto_SparseTensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_SparseTensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_SparseTensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_SparseTensor*>(
               &_TypeProto_SparseTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TypeProto_SparseTensor& a, TypeProto_SparseTensor& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_SparseTensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_SparseTensor* New() const final {
    return CreateMaybeMessage<TypeProto_SparseTensor>(nullptr);
  }

  TypeProto_SparseTensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_SparseTensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_SparseTensor& from);
  void MergeFrom(const TypeProto_SparseTensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_SparseTensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto.SparseTensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kElemTypeFieldNumber = 1,
  };
  // optional .ONNX_NAMESPACE.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::ONNX_NAMESPACE::TensorShapeProto& shape() const;
  ::ONNX_NAMESPACE::TensorShapeProto* release_shape();
  ::ONNX_NAMESPACE::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::ONNX_NAMESPACE::TensorShapeProto* shape);
  private:
  const ::ONNX_NAMESPACE::TensorShapeProto& _internal_shape() const;
  ::ONNX_NAMESPACE::TensorShapeProto* _internal_mutable_shape();
  public:

  // optional int32 elem_type = 1;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type() const;
  void set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elem_type() const;
  void _internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto.SparseTensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ONNX_NAMESPACE::TensorShapeProto* shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto_Opaque :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto.Opaque) */ {
 public:
  TypeProto_Opaque();
  virtual ~TypeProto_Opaque();

  TypeProto_Opaque(const TypeProto_Opaque& from);
  TypeProto_Opaque(TypeProto_Opaque&& from) noexcept
    : TypeProto_Opaque() {
    *this = ::std::move(from);
  }

  inline TypeProto_Opaque& operator=(const TypeProto_Opaque& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Opaque& operator=(TypeProto_Opaque&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Opaque& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Opaque* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Opaque*>(
               &_TypeProto_Opaque_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TypeProto_Opaque& a, TypeProto_Opaque& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Opaque* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Opaque* New() const final {
    return CreateMaybeMessage<TypeProto_Opaque>(nullptr);
  }

  TypeProto_Opaque* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Opaque>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Opaque& from);
  void MergeFrom(const TypeProto_Opaque& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Opaque* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto.Opaque";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // optional string domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto.Opaque)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API TypeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.TypeProto) */ {
 public:
  TypeProto();
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto& default_instance();

  enum ValueCase {
    kTensorType = 1,
    kSequenceType = 4,
    kMapType = 5,
    kSparseTensorType = 8,
    kOpaqueType = 7,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto* New() const final {
    return CreateMaybeMessage<TypeProto>(nullptr);
  }

  TypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.TypeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TypeProto_Tensor Tensor;
  typedef TypeProto_Sequence Sequence;
  typedef TypeProto_Map Map;
  typedef TypeProto_SparseTensor SparseTensor;
  typedef TypeProto_Opaque Opaque;

  // accessors -------------------------------------------------------

  enum : int {
    kDenotationFieldNumber = 6,
    kTensorTypeFieldNumber = 1,
    kSequenceTypeFieldNumber = 4,
    kMapTypeFieldNumber = 5,
    kSparseTensorTypeFieldNumber = 8,
    kOpaqueTypeFieldNumber = 7,
  };
  // optional string denotation = 6;
  bool has_denotation() const;
  private:
  bool _internal_has_denotation() const;
  public:
  void clear_denotation();
  const std::string& denotation() const;
  void set_denotation(const std::string& value);
  void set_denotation(std::string&& value);
  void set_denotation(const char* value);
  void set_denotation(const char* value, size_t size);
  std::string* mutable_denotation();
  std::string* release_denotation();
  void set_allocated_denotation(std::string* denotation);
  private:
  const std::string& _internal_denotation() const;
  void _internal_set_denotation(const std::string& value);
  std::string* _internal_mutable_denotation();
  public:

  // optional .ONNX_NAMESPACE.TypeProto.Tensor tensor_type = 1;
  bool has_tensor_type() const;
  private:
  bool _internal_has_tensor_type() const;
  public:
  void clear_tensor_type();
  const ::ONNX_NAMESPACE::TypeProto_Tensor& tensor_type() const;
  ::ONNX_NAMESPACE::TypeProto_Tensor* release_tensor_type();
  ::ONNX_NAMESPACE::TypeProto_Tensor* mutable_tensor_type();
  void set_allocated_tensor_type(::ONNX_NAMESPACE::TypeProto_Tensor* tensor_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto_Tensor& _internal_tensor_type() const;
  ::ONNX_NAMESPACE::TypeProto_Tensor* _internal_mutable_tensor_type();
  public:

  // optional .ONNX_NAMESPACE.TypeProto.Sequence sequence_type = 4;
  bool has_sequence_type() const;
  private:
  bool _internal_has_sequence_type() const;
  public:
  void clear_sequence_type();
  const ::ONNX_NAMESPACE::TypeProto_Sequence& sequence_type() const;
  ::ONNX_NAMESPACE::TypeProto_Sequence* release_sequence_type();
  ::ONNX_NAMESPACE::TypeProto_Sequence* mutable_sequence_type();
  void set_allocated_sequence_type(::ONNX_NAMESPACE::TypeProto_Sequence* sequence_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto_Sequence& _internal_sequence_type() const;
  ::ONNX_NAMESPACE::TypeProto_Sequence* _internal_mutable_sequence_type();
  public:

  // optional .ONNX_NAMESPACE.TypeProto.Map map_type = 5;
  bool has_map_type() const;
  private:
  bool _internal_has_map_type() const;
  public:
  void clear_map_type();
  const ::ONNX_NAMESPACE::TypeProto_Map& map_type() const;
  ::ONNX_NAMESPACE::TypeProto_Map* release_map_type();
  ::ONNX_NAMESPACE::TypeProto_Map* mutable_map_type();
  void set_allocated_map_type(::ONNX_NAMESPACE::TypeProto_Map* map_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto_Map& _internal_map_type() const;
  ::ONNX_NAMESPACE::TypeProto_Map* _internal_mutable_map_type();
  public:

  // optional .ONNX_NAMESPACE.TypeProto.SparseTensor sparse_tensor_type = 8;
  bool has_sparse_tensor_type() const;
  private:
  bool _internal_has_sparse_tensor_type() const;
  public:
  void clear_sparse_tensor_type();
  const ::ONNX_NAMESPACE::TypeProto_SparseTensor& sparse_tensor_type() const;
  ::ONNX_NAMESPACE::TypeProto_SparseTensor* release_sparse_tensor_type();
  ::ONNX_NAMESPACE::TypeProto_SparseTensor* mutable_sparse_tensor_type();
  void set_allocated_sparse_tensor_type(::ONNX_NAMESPACE::TypeProto_SparseTensor* sparse_tensor_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto_SparseTensor& _internal_sparse_tensor_type() const;
  ::ONNX_NAMESPACE::TypeProto_SparseTensor* _internal_mutable_sparse_tensor_type();
  public:

  // optional .ONNX_NAMESPACE.TypeProto.Opaque opaque_type = 7;
  bool has_opaque_type() const;
  private:
  bool _internal_has_opaque_type() const;
  public:
  void clear_opaque_type();
  const ::ONNX_NAMESPACE::TypeProto_Opaque& opaque_type() const;
  ::ONNX_NAMESPACE::TypeProto_Opaque* release_opaque_type();
  ::ONNX_NAMESPACE::TypeProto_Opaque* mutable_opaque_type();
  void set_allocated_opaque_type(::ONNX_NAMESPACE::TypeProto_Opaque* opaque_type);
  private:
  const ::ONNX_NAMESPACE::TypeProto_Opaque& _internal_opaque_type() const;
  ::ONNX_NAMESPACE::TypeProto_Opaque* _internal_mutable_opaque_type();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.TypeProto)
 private:
  class _Internal;
  void set_has_tensor_type();
  void set_has_sequence_type();
  void set_has_map_type();
  void set_has_sparse_tensor_type();
  void set_has_opaque_type();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denotation_;
  union ValueUnion {
    ValueUnion() {}
    ::ONNX_NAMESPACE::TypeProto_Tensor* tensor_type_;
    ::ONNX_NAMESPACE::TypeProto_Sequence* sequence_type_;
    ::ONNX_NAMESPACE::TypeProto_Map* map_type_;
    ::ONNX_NAMESPACE::TypeProto_SparseTensor* sparse_tensor_type_;
    ::ONNX_NAMESPACE::TypeProto_Opaque* opaque_type_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API OperatorSetIdProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ONNX_NAMESPACE.OperatorSetIdProto) */ {
 public:
  OperatorSetIdProto();
  virtual ~OperatorSetIdProto();

  OperatorSetIdProto(const OperatorSetIdProto& from);
  OperatorSetIdProto(OperatorSetIdProto&& from) noexcept
    : OperatorSetIdProto() {
    *this = ::std::move(from);
  }

  inline OperatorSetIdProto& operator=(const OperatorSetIdProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatorSetIdProto& operator=(OperatorSetIdProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperatorSetIdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatorSetIdProto* internal_default_instance() {
    return reinterpret_cast<const OperatorSetIdProto*>(
               &_OperatorSetIdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(OperatorSetIdProto& a, OperatorSetIdProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatorSetIdProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperatorSetIdProto* New() const final {
    return CreateMaybeMessage<OperatorSetIdProto>(nullptr);
  }

  OperatorSetIdProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperatorSetIdProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperatorSetIdProto& from);
  void MergeFrom(const OperatorSetIdProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorSetIdProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ONNX_NAMESPACE.OperatorSetIdProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto);
    return ::descriptor_table_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional string domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional int64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ONNX_NAMESPACE.OperatorSetIdProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  friend struct ::TableStruct_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributeProto

// optional string name = 1;
inline bool AttributeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributeProto::has_name() const {
  return _internal_has_name();
}
inline void AttributeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.name)
  return _internal_name();
}
inline void AttributeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.name)
}
inline std::string* AttributeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.name)
  return _internal_mutable_name();
}
inline const std::string& AttributeProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void AttributeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AttributeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.AttributeProto.name)
}
inline std::string* AttributeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.name)
}

// optional string ref_attr_name = 21;
inline bool AttributeProto::_internal_has_ref_attr_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AttributeProto::has_ref_attr_name() const {
  return _internal_has_ref_attr_name();
}
inline void AttributeProto::clear_ref_attr_name() {
  ref_attr_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AttributeProto::ref_attr_name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
  return _internal_ref_attr_name();
}
inline void AttributeProto::set_ref_attr_name(const std::string& value) {
  _internal_set_ref_attr_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
}
inline std::string* AttributeProto::mutable_ref_attr_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
  return _internal_mutable_ref_attr_name();
}
inline const std::string& AttributeProto::_internal_ref_attr_name() const {
  return ref_attr_name_.GetNoArena();
}
inline void AttributeProto::_internal_set_ref_attr_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ref_attr_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AttributeProto::set_ref_attr_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ref_attr_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
}
inline void AttributeProto::set_ref_attr_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ref_attr_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
}
inline void AttributeProto::set_ref_attr_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ref_attr_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
}
inline std::string* AttributeProto::_internal_mutable_ref_attr_name() {
  _has_bits_[0] |= 0x00000008u;
  return ref_attr_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AttributeProto::release_ref_attr_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
  if (!_internal_has_ref_attr_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ref_attr_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_ref_attr_name(std::string* ref_attr_name) {
  if (ref_attr_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ref_attr_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_attr_name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.ref_attr_name)
}

// optional string doc_string = 13;
inline bool AttributeProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AttributeProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void AttributeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AttributeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.doc_string)
  return _internal_doc_string();
}
inline void AttributeProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.doc_string)
}
inline std::string* AttributeProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& AttributeProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void AttributeProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AttributeProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.AttributeProto.doc_string)
}
inline void AttributeProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.AttributeProto.doc_string)
}
inline void AttributeProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.AttributeProto.doc_string)
}
inline std::string* AttributeProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000004u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AttributeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.doc_string)
}

// optional .ONNX_NAMESPACE.AttributeProto.AttributeType type = 20;
inline bool AttributeProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AttributeProto::has_type() const {
  return _internal_has_type();
}
inline void AttributeProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::ONNX_NAMESPACE::AttributeProto_AttributeType AttributeProto::_internal_type() const {
  return static_cast< ::ONNX_NAMESPACE::AttributeProto_AttributeType >(type_);
}
inline ::ONNX_NAMESPACE::AttributeProto_AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.type)
  return _internal_type();
}
inline void AttributeProto::_internal_set_type(::ONNX_NAMESPACE::AttributeProto_AttributeType value) {
  assert(::ONNX_NAMESPACE::AttributeProto_AttributeType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void AttributeProto::set_type(::ONNX_NAMESPACE::AttributeProto_AttributeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.type)
}

// optional float f = 2;
inline bool AttributeProto::_internal_has_f() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AttributeProto::has_f() const {
  return _internal_has_f();
}
inline void AttributeProto::clear_f() {
  f_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float AttributeProto::_internal_f() const {
  return f_;
}
inline float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.f)
  return _internal_f();
}
inline void AttributeProto::_internal_set_f(float value) {
  _has_bits_[0] |= 0x00000100u;
  f_ = value;
}
inline void AttributeProto::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.f)
}

// optional int64 i = 3;
inline bool AttributeProto::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AttributeProto::has_i() const {
  return _internal_has_i();
}
inline void AttributeProto::clear_i() {
  i_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeProto::_internal_i() const {
  return i_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.i)
  return _internal_i();
}
inline void AttributeProto::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  i_ = value;
}
inline void AttributeProto::set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.i)
}

// optional bytes s = 4;
inline bool AttributeProto::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AttributeProto::has_s() const {
  return _internal_has_s();
}
inline void AttributeProto::clear_s() {
  s_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.s)
  return _internal_s();
}
inline void AttributeProto::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.s)
}
inline std::string* AttributeProto::mutable_s() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.s)
  return _internal_mutable_s();
}
inline const std::string& AttributeProto::_internal_s() const {
  return s_.GetNoArena();
}
inline void AttributeProto::_internal_set_s(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AttributeProto::set_s(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  s_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.AttributeProto.s)
}
inline void AttributeProto::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.AttributeProto.s)
}
inline void AttributeProto::set_s(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.AttributeProto.s)
}
inline std::string* AttributeProto::_internal_mutable_s() {
  _has_bits_[0] |= 0x00000002u;
  return s_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AttributeProto::release_s() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.s)
  if (!_internal_has_s()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return s_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  s_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.s)
}

// optional .ONNX_NAMESPACE.TensorProto t = 5;
inline bool AttributeProto::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || t_ != nullptr);
  return value;
}
inline bool AttributeProto::has_t() const {
  return _internal_has_t();
}
inline void AttributeProto::clear_t() {
  if (t_ != nullptr) t_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ONNX_NAMESPACE::TensorProto& AttributeProto::_internal_t() const {
  const ::ONNX_NAMESPACE::TensorProto* p = t_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorProto*>(
      &::ONNX_NAMESPACE::_TensorProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorProto& AttributeProto::t() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.t)
  return _internal_t();
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::release_t() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.t)
  _has_bits_[0] &= ~0x00000010u;
  ::ONNX_NAMESPACE::TensorProto* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::_internal_mutable_t() {
  _has_bits_[0] |= 0x00000010u;
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto>(GetArenaNoVirtual());
    t_ = p;
  }
  return t_;
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::mutable_t() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.t)
  return _internal_mutable_t();
}
inline void AttributeProto::set_allocated_t(::ONNX_NAMESPACE::TensorProto* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.t)
}

// optional .ONNX_NAMESPACE.GraphProto g = 6;
inline bool AttributeProto::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || g_ != nullptr);
  return value;
}
inline bool AttributeProto::has_g() const {
  return _internal_has_g();
}
inline void AttributeProto::clear_g() {
  if (g_ != nullptr) g_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ONNX_NAMESPACE::GraphProto& AttributeProto::_internal_g() const {
  const ::ONNX_NAMESPACE::GraphProto* p = g_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::GraphProto*>(
      &::ONNX_NAMESPACE::_GraphProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::GraphProto& AttributeProto::g() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.g)
  return _internal_g();
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::release_g() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.g)
  _has_bits_[0] &= ~0x00000020u;
  ::ONNX_NAMESPACE::GraphProto* temp = g_;
  g_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::_internal_mutable_g() {
  _has_bits_[0] |= 0x00000020u;
  if (g_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::GraphProto>(GetArenaNoVirtual());
    g_ = p;
  }
  return g_;
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::mutable_g() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.g)
  return _internal_mutable_g();
}
inline void AttributeProto::set_allocated_g(::ONNX_NAMESPACE::GraphProto* g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete g_;
  }
  if (g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  g_ = g;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.g)
}

// optional .ONNX_NAMESPACE.SparseTensorProto sparse_tensor = 22;
inline bool AttributeProto::_internal_has_sparse_tensor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || sparse_tensor_ != nullptr);
  return value;
}
inline bool AttributeProto::has_sparse_tensor() const {
  return _internal_has_sparse_tensor();
}
inline void AttributeProto::clear_sparse_tensor() {
  if (sparse_tensor_ != nullptr) sparse_tensor_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& AttributeProto::_internal_sparse_tensor() const {
  const ::ONNX_NAMESPACE::SparseTensorProto* p = sparse_tensor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::SparseTensorProto*>(
      &::ONNX_NAMESPACE::_SparseTensorProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& AttributeProto::sparse_tensor() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.sparse_tensor)
  return _internal_sparse_tensor();
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::release_sparse_tensor() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.AttributeProto.sparse_tensor)
  _has_bits_[0] &= ~0x00000040u;
  ::ONNX_NAMESPACE::SparseTensorProto* temp = sparse_tensor_;
  sparse_tensor_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::_internal_mutable_sparse_tensor() {
  _has_bits_[0] |= 0x00000040u;
  if (sparse_tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::SparseTensorProto>(GetArenaNoVirtual());
    sparse_tensor_ = p;
  }
  return sparse_tensor_;
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::mutable_sparse_tensor() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.sparse_tensor)
  return _internal_mutable_sparse_tensor();
}
inline void AttributeProto::set_allocated_sparse_tensor(::ONNX_NAMESPACE::SparseTensorProto* sparse_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sparse_tensor_;
  }
  if (sparse_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sparse_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse_tensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sparse_tensor_ = sparse_tensor;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.AttributeProto.sparse_tensor)
}

// repeated float floats = 7;
inline int AttributeProto::_internal_floats_size() const {
  return floats_.size();
}
inline int AttributeProto::floats_size() const {
  return _internal_floats_size();
}
inline void AttributeProto::clear_floats() {
  floats_.Clear();
}
inline float AttributeProto::_internal_floats(int index) const {
  return floats_.Get(index);
}
inline float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.floats)
  return _internal_floats(index);
}
inline void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.floats)
}
inline void AttributeProto::_internal_add_floats(float value) {
  floats_.Add(value);
}
inline void AttributeProto::add_floats(float value) {
  _internal_add_floats(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.floats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttributeProto::_internal_floats() const {
  return floats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.floats)
  return _internal_floats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttributeProto::_internal_mutable_floats() {
  return &floats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.floats)
  return _internal_mutable_floats();
}

// repeated int64 ints = 8;
inline int AttributeProto::_internal_ints_size() const {
  return ints_.size();
}
inline int AttributeProto::ints_size() const {
  return _internal_ints_size();
}
inline void AttributeProto::clear_ints() {
  ints_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeProto::_internal_ints(int index) const {
  return ints_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.ints)
  return _internal_ints(index);
}
inline void AttributeProto::set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.ints)
}
inline void AttributeProto::_internal_add_ints(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ints_.Add(value);
}
inline void AttributeProto::add_ints(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_ints(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.ints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttributeProto::_internal_ints() const {
  return ints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.ints)
  return _internal_ints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttributeProto::_internal_mutable_ints() {
  return &ints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.ints)
  return _internal_mutable_ints();
}

// repeated bytes strings = 9;
inline int AttributeProto::_internal_strings_size() const {
  return strings_.size();
}
inline int AttributeProto::strings_size() const {
  return _internal_strings_size();
}
inline void AttributeProto::clear_strings() {
  strings_.Clear();
}
inline std::string* AttributeProto::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:ONNX_NAMESPACE.AttributeProto.strings)
  return _internal_add_strings();
}
inline const std::string& AttributeProto::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.strings)
  return _internal_strings(index);
}
inline std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.strings)
  return strings_.Mutable(index);
}
inline void AttributeProto::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.strings)
  strings_.Mutable(index)->assign(value);
}
inline void AttributeProto::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.AttributeProto.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void AttributeProto::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.AttributeProto.strings)
}
inline std::string* AttributeProto::_internal_add_strings() {
  return strings_.Add();
}
inline void AttributeProto::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.strings)
}
inline void AttributeProto::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ONNX_NAMESPACE.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ONNX_NAMESPACE.AttributeProto.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.strings)
  return &strings_;
}

// repeated .ONNX_NAMESPACE.TensorProto tensors = 10;
inline int AttributeProto::_internal_tensors_size() const {
  return tensors_.size();
}
inline int AttributeProto::tensors_size() const {
  return _internal_tensors_size();
}
inline void AttributeProto::clear_tensors() {
  tensors_.Clear();
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.tensors)
  return tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >*
AttributeProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.tensors)
  return &tensors_;
}
inline const ::ONNX_NAMESPACE::TensorProto& AttributeProto::_internal_tensors(int index) const {
  return tensors_.Get(index);
}
inline const ::ONNX_NAMESPACE::TensorProto& AttributeProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.tensors)
  return _internal_tensors(index);
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::_internal_add_tensors() {
  return tensors_.Add();
}
inline ::ONNX_NAMESPACE::TensorProto* AttributeProto::add_tensors() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.tensors)
  return _internal_add_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >&
AttributeProto::tensors() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.tensors)
  return tensors_;
}

// repeated .ONNX_NAMESPACE.GraphProto graphs = 11;
inline int AttributeProto::_internal_graphs_size() const {
  return graphs_.size();
}
inline int AttributeProto::graphs_size() const {
  return _internal_graphs_size();
}
inline void AttributeProto::clear_graphs() {
  graphs_.Clear();
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.graphs)
  return graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::GraphProto >*
AttributeProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.graphs)
  return &graphs_;
}
inline const ::ONNX_NAMESPACE::GraphProto& AttributeProto::_internal_graphs(int index) const {
  return graphs_.Get(index);
}
inline const ::ONNX_NAMESPACE::GraphProto& AttributeProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.graphs)
  return _internal_graphs(index);
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::_internal_add_graphs() {
  return graphs_.Add();
}
inline ::ONNX_NAMESPACE::GraphProto* AttributeProto::add_graphs() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.graphs)
  return _internal_add_graphs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::GraphProto >&
AttributeProto::graphs() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.graphs)
  return graphs_;
}

// repeated .ONNX_NAMESPACE.SparseTensorProto sparse_tensors = 23;
inline int AttributeProto::_internal_sparse_tensors_size() const {
  return sparse_tensors_.size();
}
inline int AttributeProto::sparse_tensors_size() const {
  return _internal_sparse_tensors_size();
}
inline void AttributeProto::clear_sparse_tensors() {
  sparse_tensors_.Clear();
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::mutable_sparse_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.AttributeProto.sparse_tensors)
  return sparse_tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >*
AttributeProto::mutable_sparse_tensors() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.AttributeProto.sparse_tensors)
  return &sparse_tensors_;
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& AttributeProto::_internal_sparse_tensors(int index) const {
  return sparse_tensors_.Get(index);
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& AttributeProto::sparse_tensors(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.AttributeProto.sparse_tensors)
  return _internal_sparse_tensors(index);
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::_internal_add_sparse_tensors() {
  return sparse_tensors_.Add();
}
inline ::ONNX_NAMESPACE::SparseTensorProto* AttributeProto::add_sparse_tensors() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.AttributeProto.sparse_tensors)
  return _internal_add_sparse_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >&
AttributeProto::sparse_tensors() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.AttributeProto.sparse_tensors)
  return sparse_tensors_;
}

// -------------------------------------------------------------------

// ValueInfoProto

// optional string name = 1;
inline bool ValueInfoProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ValueInfoProto::has_name() const {
  return _internal_has_name();
}
inline void ValueInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ValueInfoProto::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ValueInfoProto.name)
  return _internal_name();
}
inline void ValueInfoProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ValueInfoProto.name)
}
inline std::string* ValueInfoProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ValueInfoProto.name)
  return _internal_mutable_name();
}
inline const std::string& ValueInfoProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void ValueInfoProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValueInfoProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ValueInfoProto.name)
}
inline std::string* ValueInfoProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValueInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ValueInfoProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValueInfoProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ValueInfoProto.name)
}

// optional .ONNX_NAMESPACE.TypeProto type = 2;
inline bool ValueInfoProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ValueInfoProto::has_type() const {
  return _internal_has_type();
}
inline void ValueInfoProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ONNX_NAMESPACE::TypeProto& ValueInfoProto::_internal_type() const {
  const ::ONNX_NAMESPACE::TypeProto* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TypeProto*>(
      &::ONNX_NAMESPACE::_TypeProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto& ValueInfoProto::type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ValueInfoProto.type)
  return _internal_type();
}
inline ::ONNX_NAMESPACE::TypeProto* ValueInfoProto::release_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ValueInfoProto.type)
  _has_bits_[0] &= ~0x00000004u;
  ::ONNX_NAMESPACE::TypeProto* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TypeProto* ValueInfoProto::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::ONNX_NAMESPACE::TypeProto* ValueInfoProto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ValueInfoProto.type)
  return _internal_mutable_type();
}
inline void ValueInfoProto::set_allocated_type(::ONNX_NAMESPACE::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ValueInfoProto.type)
}

// optional string doc_string = 3;
inline bool ValueInfoProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ValueInfoProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void ValueInfoProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ValueInfoProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ValueInfoProto.doc_string)
  return _internal_doc_string();
}
inline void ValueInfoProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ValueInfoProto.doc_string)
}
inline std::string* ValueInfoProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ValueInfoProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& ValueInfoProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void ValueInfoProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValueInfoProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ValueInfoProto.doc_string)
}
inline void ValueInfoProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ValueInfoProto.doc_string)
}
inline void ValueInfoProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ValueInfoProto.doc_string)
}
inline std::string* ValueInfoProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000002u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValueInfoProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ValueInfoProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValueInfoProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ValueInfoProto.doc_string)
}

// -------------------------------------------------------------------

// NodeProto

// repeated string input = 1;
inline int NodeProto::_internal_input_size() const {
  return input_.size();
}
inline int NodeProto::input_size() const {
  return _internal_input_size();
}
inline void NodeProto::clear_input() {
  input_.Clear();
}
inline std::string* NodeProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:ONNX_NAMESPACE.NodeProto.input)
  return _internal_add_input();
}
inline const std::string& NodeProto::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.input)
  return _internal_input(index);
}
inline std::string* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.input)
  return input_.Mutable(index);
}
inline void NodeProto::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.input)
  input_.Mutable(index)->assign(value);
}
inline void NodeProto::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void NodeProto::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.input)
}
inline void NodeProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.input)
}
inline std::string* NodeProto::_internal_add_input() {
  return input_.Add();
}
inline void NodeProto::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.NodeProto.input)
}
inline void NodeProto::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.NodeProto.input)
}
inline void NodeProto::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ONNX_NAMESPACE.NodeProto.input)
}
inline void NodeProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ONNX_NAMESPACE.NodeProto.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.NodeProto.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.NodeProto.input)
  return &input_;
}

// repeated string output = 2;
inline int NodeProto::_internal_output_size() const {
  return output_.size();
}
inline int NodeProto::output_size() const {
  return _internal_output_size();
}
inline void NodeProto::clear_output() {
  output_.Clear();
}
inline std::string* NodeProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:ONNX_NAMESPACE.NodeProto.output)
  return _internal_add_output();
}
inline const std::string& NodeProto::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& NodeProto::output(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.output)
  return _internal_output(index);
}
inline std::string* NodeProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.output)
  return output_.Mutable(index);
}
inline void NodeProto::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.output)
  output_.Mutable(index)->assign(value);
}
inline void NodeProto::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void NodeProto::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.output)
}
inline void NodeProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.output)
}
inline std::string* NodeProto::_internal_add_output() {
  return output_.Add();
}
inline void NodeProto::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.NodeProto.output)
}
inline void NodeProto::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.NodeProto.output)
}
inline void NodeProto::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ONNX_NAMESPACE.NodeProto.output)
}
inline void NodeProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ONNX_NAMESPACE.NodeProto.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeProto::output() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.NodeProto.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.NodeProto.output)
  return &output_;
}

// optional string name = 3;
inline bool NodeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeProto::has_name() const {
  return _internal_has_name();
}
inline void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.name)
  return _internal_name();
}
inline void NodeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.name)
}
inline std::string* NodeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.name)
  return _internal_mutable_name();
}
inline const std::string& NodeProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void NodeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.NodeProto.name)
}
inline void NodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.name)
}
inline void NodeProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.name)
}
inline std::string* NodeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.NodeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.NodeProto.name)
}

// optional string op_type = 4;
inline bool NodeProto::_internal_has_op_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NodeProto::has_op_type() const {
  return _internal_has_op_type();
}
inline void NodeProto::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.op_type)
  return _internal_op_type();
}
inline void NodeProto::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.op_type)
}
inline std::string* NodeProto::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& NodeProto::_internal_op_type() const {
  return op_type_.GetNoArena();
}
inline void NodeProto::_internal_set_op_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeProto::set_op_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.op_type)
}
inline std::string* NodeProto::_internal_mutable_op_type() {
  _has_bits_[0] |= 0x00000002u;
  return op_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.NodeProto.op_type)
  if (!_internal_has_op_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return op_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  op_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.NodeProto.op_type)
}

// optional string domain = 7;
inline bool NodeProto::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NodeProto::has_domain() const {
  return _internal_has_domain();
}
inline void NodeProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NodeProto::domain() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.domain)
  return _internal_domain();
}
inline void NodeProto::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.domain)
}
inline std::string* NodeProto::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.domain)
  return _internal_mutable_domain();
}
inline const std::string& NodeProto::_internal_domain() const {
  return domain_.GetNoArena();
}
inline void NodeProto::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeProto::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.NodeProto.domain)
}
inline void NodeProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.domain)
}
inline void NodeProto::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.domain)
}
inline std::string* NodeProto::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000008u;
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeProto::release_domain() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.NodeProto.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.NodeProto.domain)
}

// repeated .ONNX_NAMESPACE.AttributeProto attribute = 5;
inline int NodeProto::_internal_attribute_size() const {
  return attribute_.size();
}
inline int NodeProto::attribute_size() const {
  return _internal_attribute_size();
}
inline void NodeProto::clear_attribute() {
  attribute_.Clear();
}
inline ::ONNX_NAMESPACE::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.NodeProto.attribute)
  return &attribute_;
}
inline const ::ONNX_NAMESPACE::AttributeProto& NodeProto::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::ONNX_NAMESPACE::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.attribute)
  return _internal_attribute(index);
}
inline ::ONNX_NAMESPACE::AttributeProto* NodeProto::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::ONNX_NAMESPACE::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.NodeProto.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.NodeProto.attribute)
  return attribute_;
}

// optional string doc_string = 6;
inline bool NodeProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NodeProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void NodeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NodeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.NodeProto.doc_string)
  return _internal_doc_string();
}
inline void NodeProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.NodeProto.doc_string)
}
inline std::string* NodeProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.NodeProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& NodeProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void NodeProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.NodeProto.doc_string)
}
inline std::string* NodeProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000004u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.NodeProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.NodeProto.doc_string)
}

// -------------------------------------------------------------------

// ModelProto

// optional int64 ir_version = 1;
inline bool ModelProto::_internal_has_ir_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelProto::has_ir_version() const {
  return _internal_has_ir_version();
}
inline void ModelProto::clear_ir_version() {
  ir_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::_internal_ir_version() const {
  return ir_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.ir_version)
  return _internal_ir_version();
}
inline void ModelProto::_internal_set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  ir_version_ = value;
}
inline void ModelProto::set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ir_version(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.ir_version)
}

// repeated .ONNX_NAMESPACE.OperatorSetIdProto opset_import = 8;
inline int ModelProto::_internal_opset_import_size() const {
  return opset_import_.size();
}
inline int ModelProto::opset_import_size() const {
  return _internal_opset_import_size();
}
inline void ModelProto::clear_opset_import() {
  opset_import_.Clear();
}
inline ::ONNX_NAMESPACE::OperatorSetIdProto* ModelProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.opset_import)
  return opset_import_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::OperatorSetIdProto >*
ModelProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.ModelProto.opset_import)
  return &opset_import_;
}
inline const ::ONNX_NAMESPACE::OperatorSetIdProto& ModelProto::_internal_opset_import(int index) const {
  return opset_import_.Get(index);
}
inline const ::ONNX_NAMESPACE::OperatorSetIdProto& ModelProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.opset_import)
  return _internal_opset_import(index);
}
inline ::ONNX_NAMESPACE::OperatorSetIdProto* ModelProto::_internal_add_opset_import() {
  return opset_import_.Add();
}
inline ::ONNX_NAMESPACE::OperatorSetIdProto* ModelProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.ModelProto.opset_import)
  return _internal_add_opset_import();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::OperatorSetIdProto >&
ModelProto::opset_import() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.ModelProto.opset_import)
  return opset_import_;
}

// optional string producer_name = 2;
inline bool ModelProto::_internal_has_producer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelProto::has_producer_name() const {
  return _internal_has_producer_name();
}
inline void ModelProto::clear_producer_name() {
  producer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelProto::producer_name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.producer_name)
  return _internal_producer_name();
}
inline void ModelProto::set_producer_name(const std::string& value) {
  _internal_set_producer_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.producer_name)
}
inline std::string* ModelProto::mutable_producer_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.producer_name)
  return _internal_mutable_producer_name();
}
inline const std::string& ModelProto::_internal_producer_name() const {
  return producer_name_.GetNoArena();
}
inline void ModelProto::_internal_set_producer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelProto::set_producer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  producer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ModelProto.producer_name)
}
inline std::string* ModelProto::_internal_mutable_producer_name() {
  _has_bits_[0] |= 0x00000001u;
  return producer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelProto::release_producer_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ModelProto.producer_name)
  if (!_internal_has_producer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return producer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_name(std::string* producer_name) {
  if (producer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  producer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ModelProto.producer_name)
}

// optional string producer_version = 3;
inline bool ModelProto::_internal_has_producer_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelProto::has_producer_version() const {
  return _internal_has_producer_version();
}
inline void ModelProto::clear_producer_version() {
  producer_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelProto::producer_version() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.producer_version)
  return _internal_producer_version();
}
inline void ModelProto::set_producer_version(const std::string& value) {
  _internal_set_producer_version(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.producer_version)
}
inline std::string* ModelProto::mutable_producer_version() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.producer_version)
  return _internal_mutable_producer_version();
}
inline const std::string& ModelProto::_internal_producer_version() const {
  return producer_version_.GetNoArena();
}
inline void ModelProto::_internal_set_producer_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  producer_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelProto::set_producer_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  producer_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  producer_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  producer_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ModelProto.producer_version)
}
inline std::string* ModelProto::_internal_mutable_producer_version() {
  _has_bits_[0] |= 0x00000002u;
  return producer_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelProto::release_producer_version() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ModelProto.producer_version)
  if (!_internal_has_producer_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return producer_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_version(std::string* producer_version) {
  if (producer_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  producer_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_version);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ModelProto.producer_version)
}

// optional string domain = 4;
inline bool ModelProto::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelProto::has_domain() const {
  return _internal_has_domain();
}
inline void ModelProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.domain)
  return _internal_domain();
}
inline void ModelProto::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.domain)
}
inline std::string* ModelProto::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.domain)
  return _internal_mutable_domain();
}
inline const std::string& ModelProto::_internal_domain() const {
  return domain_.GetNoArena();
}
inline void ModelProto::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelProto::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ModelProto.domain)
}
inline std::string* ModelProto::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000004u;
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelProto::release_domain() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ModelProto.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ModelProto.domain)
}

// optional int64 model_version = 5;
inline bool ModelProto::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelProto::has_model_version() const {
  return _internal_has_model_version();
}
inline void ModelProto::clear_model_version() {
  model_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::_internal_model_version() const {
  return model_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.model_version)
  return _internal_model_version();
}
inline void ModelProto::_internal_set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  model_version_ = value;
}
inline void ModelProto::set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.model_version)
}

// optional string doc_string = 6;
inline bool ModelProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void ModelProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.doc_string)
  return _internal_doc_string();
}
inline void ModelProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.ModelProto.doc_string)
}
inline std::string* ModelProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& ModelProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void ModelProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.ModelProto.doc_string)
}
inline std::string* ModelProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000008u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ModelProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ModelProto.doc_string)
}

// optional .ONNX_NAMESPACE.GraphProto graph = 7;
inline bool ModelProto::_internal_has_graph() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || graph_ != nullptr);
  return value;
}
inline bool ModelProto::has_graph() const {
  return _internal_has_graph();
}
inline void ModelProto::clear_graph() {
  if (graph_ != nullptr) graph_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ONNX_NAMESPACE::GraphProto& ModelProto::_internal_graph() const {
  const ::ONNX_NAMESPACE::GraphProto* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::GraphProto*>(
      &::ONNX_NAMESPACE::_GraphProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::GraphProto& ModelProto::graph() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.graph)
  return _internal_graph();
}
inline ::ONNX_NAMESPACE::GraphProto* ModelProto::release_graph() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.ModelProto.graph)
  _has_bits_[0] &= ~0x00000010u;
  ::ONNX_NAMESPACE::GraphProto* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::GraphProto* ModelProto::_internal_mutable_graph() {
  _has_bits_[0] |= 0x00000010u;
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::GraphProto>(GetArenaNoVirtual());
    graph_ = p;
  }
  return graph_;
}
inline ::ONNX_NAMESPACE::GraphProto* ModelProto::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.graph)
  return _internal_mutable_graph();
}
inline void ModelProto::set_allocated_graph(::ONNX_NAMESPACE::GraphProto* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.ModelProto.graph)
}

// repeated .ONNX_NAMESPACE.StringStringEntryProto metadata_props = 14;
inline int ModelProto::_internal_metadata_props_size() const {
  return metadata_props_.size();
}
inline int ModelProto::metadata_props_size() const {
  return _internal_metadata_props_size();
}
inline void ModelProto::clear_metadata_props() {
  metadata_props_.Clear();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* ModelProto::mutable_metadata_props(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.ModelProto.metadata_props)
  return metadata_props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
ModelProto::mutable_metadata_props() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.ModelProto.metadata_props)
  return &metadata_props_;
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& ModelProto::_internal_metadata_props(int index) const {
  return metadata_props_.Get(index);
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& ModelProto::metadata_props(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.ModelProto.metadata_props)
  return _internal_metadata_props(index);
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* ModelProto::_internal_add_metadata_props() {
  return metadata_props_.Add();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* ModelProto::add_metadata_props() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.ModelProto.metadata_props)
  return _internal_add_metadata_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
ModelProto::metadata_props() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.ModelProto.metadata_props)
  return metadata_props_;
}

// -------------------------------------------------------------------

// StringStringEntryProto

// optional string key = 1;
inline bool StringStringEntryProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringStringEntryProto::has_key() const {
  return _internal_has_key();
}
inline void StringStringEntryProto::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringStringEntryProto::key() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.StringStringEntryProto.key)
  return _internal_key();
}
inline void StringStringEntryProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.StringStringEntryProto.key)
}
inline std::string* StringStringEntryProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.StringStringEntryProto.key)
  return _internal_mutable_key();
}
inline const std::string& StringStringEntryProto::_internal_key() const {
  return key_.GetNoArena();
}
inline void StringStringEntryProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StringStringEntryProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.StringStringEntryProto.key)
}
inline void StringStringEntryProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.StringStringEntryProto.key)
}
inline void StringStringEntryProto::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.StringStringEntryProto.key)
}
inline std::string* StringStringEntryProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringStringEntryProto::release_key() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.StringStringEntryProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringStringEntryProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.StringStringEntryProto.key)
}

// optional string value = 2;
inline bool StringStringEntryProto::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringStringEntryProto::has_value() const {
  return _internal_has_value();
}
inline void StringStringEntryProto::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StringStringEntryProto::value() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.StringStringEntryProto.value)
  return _internal_value();
}
inline void StringStringEntryProto::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.StringStringEntryProto.value)
}
inline std::string* StringStringEntryProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.StringStringEntryProto.value)
  return _internal_mutable_value();
}
inline const std::string& StringStringEntryProto::_internal_value() const {
  return value_.GetNoArena();
}
inline void StringStringEntryProto::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StringStringEntryProto::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.StringStringEntryProto.value)
}
inline void StringStringEntryProto::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.StringStringEntryProto.value)
}
inline void StringStringEntryProto::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.StringStringEntryProto.value)
}
inline std::string* StringStringEntryProto::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringStringEntryProto::release_value() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.StringStringEntryProto.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringStringEntryProto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.StringStringEntryProto.value)
}

// -------------------------------------------------------------------

// TensorAnnotation

// optional string tensor_name = 1;
inline bool TensorAnnotation::_internal_has_tensor_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorAnnotation::has_tensor_name() const {
  return _internal_has_tensor_name();
}
inline void TensorAnnotation::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorAnnotation::tensor_name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
  return _internal_tensor_name();
}
inline void TensorAnnotation::set_tensor_name(const std::string& value) {
  _internal_set_tensor_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
}
inline std::string* TensorAnnotation::mutable_tensor_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
  return _internal_mutable_tensor_name();
}
inline const std::string& TensorAnnotation::_internal_tensor_name() const {
  return tensor_name_.GetNoArena();
}
inline void TensorAnnotation::_internal_set_tensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorAnnotation::set_tensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
}
inline void TensorAnnotation::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
}
inline void TensorAnnotation::set_tensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
}
inline std::string* TensorAnnotation::_internal_mutable_tensor_name() {
  _has_bits_[0] |= 0x00000001u;
  return tensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorAnnotation::release_tensor_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
  if (!_internal_has_tensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tensor_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorAnnotation::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorAnnotation.tensor_name)
}

// repeated .ONNX_NAMESPACE.StringStringEntryProto quant_parameter_tensor_names = 2;
inline int TensorAnnotation::_internal_quant_parameter_tensor_names_size() const {
  return quant_parameter_tensor_names_.size();
}
inline int TensorAnnotation::quant_parameter_tensor_names_size() const {
  return _internal_quant_parameter_tensor_names_size();
}
inline void TensorAnnotation::clear_quant_parameter_tensor_names() {
  quant_parameter_tensor_names_.Clear();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorAnnotation::mutable_quant_parameter_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
TensorAnnotation::mutable_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorAnnotation.quant_parameter_tensor_names)
  return &quant_parameter_tensor_names_;
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& TensorAnnotation::_internal_quant_parameter_tensor_names(int index) const {
  return quant_parameter_tensor_names_.Get(index);
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& TensorAnnotation::quant_parameter_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorAnnotation.quant_parameter_tensor_names)
  return _internal_quant_parameter_tensor_names(index);
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorAnnotation::_internal_add_quant_parameter_tensor_names() {
  return quant_parameter_tensor_names_.Add();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorAnnotation::add_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorAnnotation.quant_parameter_tensor_names)
  return _internal_add_quant_parameter_tensor_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
TensorAnnotation::quant_parameter_tensor_names() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_;
}

// -------------------------------------------------------------------

// GraphProto

// repeated .ONNX_NAMESPACE.NodeProto node = 1;
inline int GraphProto::_internal_node_size() const {
  return node_.size();
}
inline int GraphProto::node_size() const {
  return _internal_node_size();
}
inline void GraphProto::clear_node() {
  node_.Clear();
}
inline ::ONNX_NAMESPACE::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.node)
  return &node_;
}
inline const ::ONNX_NAMESPACE::NodeProto& GraphProto::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::ONNX_NAMESPACE::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.node)
  return _internal_node(index);
}
inline ::ONNX_NAMESPACE::NodeProto* GraphProto::_internal_add_node() {
  return node_.Add();
}
inline ::ONNX_NAMESPACE::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.node)
  return node_;
}

// optional string name = 2;
inline bool GraphProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GraphProto::has_name() const {
  return _internal_has_name();
}
inline void GraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.name)
  return _internal_name();
}
inline void GraphProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.GraphProto.name)
}
inline std::string* GraphProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.name)
  return _internal_mutable_name();
}
inline const std::string& GraphProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void GraphProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GraphProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.GraphProto.name)
}
inline void GraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.GraphProto.name)
}
inline void GraphProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.GraphProto.name)
}
inline std::string* GraphProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.GraphProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.GraphProto.name)
}

// repeated .ONNX_NAMESPACE.TensorProto initializer = 5;
inline int GraphProto::_internal_initializer_size() const {
  return initializer_.size();
}
inline int GraphProto::initializer_size() const {
  return _internal_initializer_size();
}
inline void GraphProto::clear_initializer() {
  initializer_.Clear();
}
inline ::ONNX_NAMESPACE::TensorProto* GraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.initializer)
  return initializer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >*
GraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.initializer)
  return &initializer_;
}
inline const ::ONNX_NAMESPACE::TensorProto& GraphProto::_internal_initializer(int index) const {
  return initializer_.Get(index);
}
inline const ::ONNX_NAMESPACE::TensorProto& GraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.initializer)
  return _internal_initializer(index);
}
inline ::ONNX_NAMESPACE::TensorProto* GraphProto::_internal_add_initializer() {
  return initializer_.Add();
}
inline ::ONNX_NAMESPACE::TensorProto* GraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.initializer)
  return _internal_add_initializer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorProto >&
GraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.initializer)
  return initializer_;
}

// repeated .ONNX_NAMESPACE.SparseTensorProto sparse_initializer = 15;
inline int GraphProto::_internal_sparse_initializer_size() const {
  return sparse_initializer_.size();
}
inline int GraphProto::sparse_initializer_size() const {
  return _internal_sparse_initializer_size();
}
inline void GraphProto::clear_sparse_initializer() {
  sparse_initializer_.Clear();
}
inline ::ONNX_NAMESPACE::SparseTensorProto* GraphProto::mutable_sparse_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.sparse_initializer)
  return sparse_initializer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >*
GraphProto::mutable_sparse_initializer() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.sparse_initializer)
  return &sparse_initializer_;
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& GraphProto::_internal_sparse_initializer(int index) const {
  return sparse_initializer_.Get(index);
}
inline const ::ONNX_NAMESPACE::SparseTensorProto& GraphProto::sparse_initializer(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.sparse_initializer)
  return _internal_sparse_initializer(index);
}
inline ::ONNX_NAMESPACE::SparseTensorProto* GraphProto::_internal_add_sparse_initializer() {
  return sparse_initializer_.Add();
}
inline ::ONNX_NAMESPACE::SparseTensorProto* GraphProto::add_sparse_initializer() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.sparse_initializer)
  return _internal_add_sparse_initializer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::SparseTensorProto >&
GraphProto::sparse_initializer() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.sparse_initializer)
  return sparse_initializer_;
}

// optional string doc_string = 10;
inline bool GraphProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GraphProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void GraphProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GraphProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.doc_string)
  return _internal_doc_string();
}
inline void GraphProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.GraphProto.doc_string)
}
inline std::string* GraphProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& GraphProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void GraphProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GraphProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.GraphProto.doc_string)
}
inline std::string* GraphProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000002u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GraphProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.GraphProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.GraphProto.doc_string)
}

// repeated .ONNX_NAMESPACE.ValueInfoProto input = 11;
inline int GraphProto::_internal_input_size() const {
  return input_.size();
}
inline int GraphProto::input_size() const {
  return _internal_input_size();
}
inline void GraphProto::clear_input() {
  input_.Clear();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
GraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.input)
  return &input_;
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.input)
  return _internal_input(index);
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::_internal_add_input() {
  return input_.Add();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::add_input() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
GraphProto::input() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.input)
  return input_;
}

// repeated .ONNX_NAMESPACE.ValueInfoProto output = 12;
inline int GraphProto::_internal_output_size() const {
  return output_.size();
}
inline int GraphProto::output_size() const {
  return _internal_output_size();
}
inline void GraphProto::clear_output() {
  output_.Clear();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
GraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.output)
  return &output_;
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.output)
  return _internal_output(index);
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::_internal_add_output() {
  return output_.Add();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::add_output() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
GraphProto::output() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.output)
  return output_;
}

// repeated .ONNX_NAMESPACE.ValueInfoProto value_info = 13;
inline int GraphProto::_internal_value_info_size() const {
  return value_info_.size();
}
inline int GraphProto::value_info_size() const {
  return _internal_value_info_size();
}
inline void GraphProto::clear_value_info() {
  value_info_.Clear();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::mutable_value_info(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.value_info)
  return value_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >*
GraphProto::mutable_value_info() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.value_info)
  return &value_info_;
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::_internal_value_info(int index) const {
  return value_info_.Get(index);
}
inline const ::ONNX_NAMESPACE::ValueInfoProto& GraphProto::value_info(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.value_info)
  return _internal_value_info(index);
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::_internal_add_value_info() {
  return value_info_.Add();
}
inline ::ONNX_NAMESPACE::ValueInfoProto* GraphProto::add_value_info() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.value_info)
  return _internal_add_value_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::ValueInfoProto >&
GraphProto::value_info() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.value_info)
  return value_info_;
}

// repeated .ONNX_NAMESPACE.TensorAnnotation quantization_annotation = 14;
inline int GraphProto::_internal_quantization_annotation_size() const {
  return quantization_annotation_.size();
}
inline int GraphProto::quantization_annotation_size() const {
  return _internal_quantization_annotation_size();
}
inline void GraphProto::clear_quantization_annotation() {
  quantization_annotation_.Clear();
}
inline ::ONNX_NAMESPACE::TensorAnnotation* GraphProto::mutable_quantization_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.GraphProto.quantization_annotation)
  return quantization_annotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorAnnotation >*
GraphProto::mutable_quantization_annotation() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.GraphProto.quantization_annotation)
  return &quantization_annotation_;
}
inline const ::ONNX_NAMESPACE::TensorAnnotation& GraphProto::_internal_quantization_annotation(int index) const {
  return quantization_annotation_.Get(index);
}
inline const ::ONNX_NAMESPACE::TensorAnnotation& GraphProto::quantization_annotation(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.GraphProto.quantization_annotation)
  return _internal_quantization_annotation(index);
}
inline ::ONNX_NAMESPACE::TensorAnnotation* GraphProto::_internal_add_quantization_annotation() {
  return quantization_annotation_.Add();
}
inline ::ONNX_NAMESPACE::TensorAnnotation* GraphProto::add_quantization_annotation() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.GraphProto.quantization_annotation)
  return _internal_add_quantization_annotation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorAnnotation >&
GraphProto::quantization_annotation() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.GraphProto.quantization_annotation)
  return quantization_annotation_;
}

// -------------------------------------------------------------------

// TensorProto_Segment

// optional int64 begin = 1;
inline bool TensorProto_Segment::_internal_has_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorProto_Segment::has_begin() const {
  return _internal_has_begin();
}
inline void TensorProto_Segment::clear_begin() {
  begin_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto_Segment::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.Segment.begin)
  return _internal_begin();
}
inline void TensorProto_Segment::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  begin_ = value;
}
inline void TensorProto_Segment::set_begin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.Segment.begin)
}

// optional int64 end = 2;
inline bool TensorProto_Segment::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorProto_Segment::has_end() const {
  return _internal_has_end();
}
inline void TensorProto_Segment::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto_Segment::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.Segment.end)
  return _internal_end();
}
inline void TensorProto_Segment::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ = value;
}
inline void TensorProto_Segment::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.Segment.end)
}

// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::_internal_dims_size() const {
  return dims_.size();
}
inline int TensorProto::dims_size() const {
  return _internal_dims_size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.dims)
  return _internal_dims(index);
}
inline void TensorProto::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.dims)
}
inline void TensorProto::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Add(value);
}
inline void TensorProto::add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.dims)
  return _internal_mutable_dims();
}

// optional int32 data_type = 2;
inline bool TensorProto::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TensorProto::has_data_type() const {
  return _internal_has_data_type();
}
inline void TensorProto::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.data_type)
  return _internal_data_type();
}
inline void TensorProto::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  data_type_ = value;
}
inline void TensorProto::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.data_type)
}

// optional .ONNX_NAMESPACE.TensorProto.Segment segment = 3;
inline bool TensorProto::_internal_has_segment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || segment_ != nullptr);
  return value;
}
inline bool TensorProto::has_segment() const {
  return _internal_has_segment();
}
inline void TensorProto::clear_segment() {
  if (segment_ != nullptr) segment_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ONNX_NAMESPACE::TensorProto_Segment& TensorProto::_internal_segment() const {
  const ::ONNX_NAMESPACE::TensorProto_Segment* p = segment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorProto_Segment*>(
      &::ONNX_NAMESPACE::_TensorProto_Segment_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorProto_Segment& TensorProto::segment() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.segment)
  return _internal_segment();
}
inline ::ONNX_NAMESPACE::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorProto.segment)
  _has_bits_[0] &= ~0x00000008u;
  ::ONNX_NAMESPACE::TensorProto_Segment* temp = segment_;
  segment_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorProto_Segment* TensorProto::_internal_mutable_segment() {
  _has_bits_[0] |= 0x00000008u;
  if (segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto_Segment>(GetArenaNoVirtual());
    segment_ = p;
  }
  return segment_;
}
inline ::ONNX_NAMESPACE::TensorProto_Segment* TensorProto::mutable_segment() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.segment)
  return _internal_mutable_segment();
}
inline void TensorProto::set_allocated_segment(::ONNX_NAMESPACE::TensorProto_Segment* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete segment_;
  }
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorProto.segment)
}

// repeated float float_data = 4 [packed = true];
inline int TensorProto::_internal_float_data_size() const {
  return float_data_.size();
}
inline int TensorProto::float_data_size() const {
  return _internal_float_data_size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.float_data)
  return _internal_float_data(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.float_data)
}
inline void TensorProto::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void TensorProto::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.float_data)
  return _internal_mutable_float_data();
}

// repeated int32 int32_data = 5 [packed = true];
inline int TensorProto::_internal_int32_data_size() const {
  return int32_data_.size();
}
inline int TensorProto::int32_data_size() const {
  return _internal_int32_data_size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_int32_data(int index) const {
  return int32_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.int32_data)
  return _internal_int32_data(index);
}
inline void TensorProto::set_int32_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.int32_data)
}
inline void TensorProto::_internal_add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_data_.Add(value);
}
inline void TensorProto::add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_data(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.int32_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::_internal_int32_data() const {
  return int32_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.int32_data)
  return _internal_int32_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::_internal_mutable_int32_data() {
  return &int32_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.int32_data)
  return _internal_mutable_int32_data();
}

// repeated bytes string_data = 6;
inline int TensorProto::_internal_string_data_size() const {
  return string_data_.size();
}
inline int TensorProto::string_data_size() const {
  return _internal_string_data_size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:ONNX_NAMESPACE.TensorProto.string_data)
  return _internal_add_string_data();
}
inline const std::string& TensorProto::_internal_string_data(int index) const {
  return string_data_.Get(index);
}
inline const std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.string_data)
  return _internal_string_data(index);
}
inline std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
inline void TensorProto::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorProto.string_data)
}
inline std::string* TensorProto::_internal_add_string_data() {
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.string_data)
}
inline void TensorProto::add_string_data(std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ONNX_NAMESPACE.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ONNX_NAMESPACE.TensorProto.string_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.string_data)
  return string_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.string_data)
  return &string_data_;
}

// repeated int64 int64_data = 7 [packed = true];
inline int TensorProto::_internal_int64_data_size() const {
  return int64_data_.size();
}
inline int TensorProto::int64_data_size() const {
  return _internal_int64_data_size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::_internal_int64_data(int index) const {
  return int64_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.int64_data)
  return _internal_int64_data(index);
}
inline void TensorProto::set_int64_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.int64_data)
}
inline void TensorProto::_internal_add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_data_.Add(value);
}
inline void TensorProto::add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_data(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.int64_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::_internal_int64_data() const {
  return int64_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.int64_data)
  return _internal_int64_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::_internal_mutable_int64_data() {
  return &int64_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.int64_data)
  return _internal_mutable_int64_data();
}

// optional string name = 8;
inline bool TensorProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorProto::has_name() const {
  return _internal_has_name();
}
inline void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.name)
  return _internal_name();
}
inline void TensorProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.name)
}
inline std::string* TensorProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.name)
  return _internal_mutable_name();
}
inline const std::string& TensorProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void TensorProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorProto.name)
}
inline void TensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorProto.name)
}
inline std::string* TensorProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorProto.name)
}

// optional string doc_string = 12;
inline bool TensorProto::_internal_has_doc_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TensorProto::has_doc_string() const {
  return _internal_has_doc_string();
}
inline void TensorProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TensorProto::doc_string() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.doc_string)
  return _internal_doc_string();
}
inline void TensorProto::set_doc_string(const std::string& value) {
  _internal_set_doc_string(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.doc_string)
}
inline std::string* TensorProto::mutable_doc_string() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.doc_string)
  return _internal_mutable_doc_string();
}
inline const std::string& TensorProto::_internal_doc_string() const {
  return doc_string_.GetNoArena();
}
inline void TensorProto::_internal_set_doc_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorProto::set_doc_string(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorProto.doc_string)
}
inline void TensorProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorProto.doc_string)
}
inline void TensorProto::set_doc_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  doc_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorProto.doc_string)
}
inline std::string* TensorProto::_internal_mutable_doc_string() {
  _has_bits_[0] |= 0x00000004u;
  return doc_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorProto.doc_string)
  if (!_internal_has_doc_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return doc_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_doc_string(std::string* doc_string) {
  if (doc_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  doc_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorProto.doc_string)
}

// optional bytes raw_data = 9;
inline bool TensorProto::_internal_has_raw_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorProto::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void TensorProto::clear_raw_data() {
  raw_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.raw_data)
  return _internal_raw_data();
}
inline void TensorProto::set_raw_data(const std::string& value) {
  _internal_set_raw_data(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.raw_data)
}
inline std::string* TensorProto::mutable_raw_data() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.raw_data)
  return _internal_mutable_raw_data();
}
inline const std::string& TensorProto::_internal_raw_data() const {
  return raw_data_.GetNoArena();
}
inline void TensorProto::_internal_set_raw_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  raw_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorProto::set_raw_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  raw_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  raw_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  raw_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorProto.raw_data)
}
inline std::string* TensorProto::_internal_mutable_raw_data() {
  _has_bits_[0] |= 0x00000002u;
  return raw_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorProto.raw_data)
  if (!_internal_has_raw_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return raw_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  raw_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_data);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorProto.raw_data)
}

// repeated .ONNX_NAMESPACE.StringStringEntryProto external_data = 13;
inline int TensorProto::_internal_external_data_size() const {
  return external_data_.size();
}
inline int TensorProto::external_data_size() const {
  return _internal_external_data_size();
}
inline void TensorProto::clear_external_data() {
  external_data_.Clear();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorProto::mutable_external_data(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorProto.external_data)
  return external_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >*
TensorProto::mutable_external_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.external_data)
  return &external_data_;
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& TensorProto::_internal_external_data(int index) const {
  return external_data_.Get(index);
}
inline const ::ONNX_NAMESPACE::StringStringEntryProto& TensorProto::external_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.external_data)
  return _internal_external_data(index);
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorProto::_internal_add_external_data() {
  return external_data_.Add();
}
inline ::ONNX_NAMESPACE::StringStringEntryProto* TensorProto::add_external_data() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.external_data)
  return _internal_add_external_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::StringStringEntryProto >&
TensorProto::external_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.external_data)
  return external_data_;
}

// optional .ONNX_NAMESPACE.TensorProto.DataLocation data_location = 14;
inline bool TensorProto::_internal_has_data_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TensorProto::has_data_location() const {
  return _internal_has_data_location();
}
inline void TensorProto::clear_data_location() {
  data_location_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ONNX_NAMESPACE::TensorProto_DataLocation TensorProto::_internal_data_location() const {
  return static_cast< ::ONNX_NAMESPACE::TensorProto_DataLocation >(data_location_);
}
inline ::ONNX_NAMESPACE::TensorProto_DataLocation TensorProto::data_location() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.data_location)
  return _internal_data_location();
}
inline void TensorProto::_internal_set_data_location(::ONNX_NAMESPACE::TensorProto_DataLocation value) {
  assert(::ONNX_NAMESPACE::TensorProto_DataLocation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  data_location_ = value;
}
inline void TensorProto::set_data_location(::ONNX_NAMESPACE::TensorProto_DataLocation value) {
  _internal_set_data_location(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.data_location)
}

// repeated double double_data = 10 [packed = true];
inline int TensorProto::_internal_double_data_size() const {
  return double_data_.size();
}
inline int TensorProto::double_data_size() const {
  return _internal_double_data_size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::_internal_double_data(int index) const {
  return double_data_.Get(index);
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.double_data)
  return _internal_double_data(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.double_data)
}
inline void TensorProto::_internal_add_double_data(double value) {
  double_data_.Add(value);
}
inline void TensorProto::add_double_data(double value) {
  _internal_add_double_data(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.double_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::_internal_double_data() const {
  return double_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.double_data)
  return _internal_double_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::_internal_mutable_double_data() {
  return &double_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.double_data)
  return _internal_mutable_double_data();
}

// repeated uint64 uint64_data = 11 [packed = true];
inline int TensorProto::_internal_uint64_data_size() const {
  return uint64_data_.size();
}
inline int TensorProto::uint64_data_size() const {
  return _internal_uint64_data_size();
}
inline void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::_internal_uint64_data(int index) const {
  return uint64_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorProto.uint64_data)
  return _internal_uint64_data(index);
}
inline void TensorProto::set_uint64_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorProto.uint64_data)
}
inline void TensorProto::_internal_add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_data_.Add(value);
}
inline void TensorProto::add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_data(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorProto.uint64_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::_internal_uint64_data() const {
  return uint64_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorProto.uint64_data)
  return _internal_uint64_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::_internal_mutable_uint64_data() {
  return &uint64_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorProto.uint64_data)
  return _internal_mutable_uint64_data();
}

// -------------------------------------------------------------------

// SparseTensorProto

// optional .ONNX_NAMESPACE.TensorProto values = 1;
inline bool SparseTensorProto::_internal_has_values() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || values_ != nullptr);
  return value;
}
inline bool SparseTensorProto::has_values() const {
  return _internal_has_values();
}
inline void SparseTensorProto::clear_values() {
  if (values_ != nullptr) values_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ONNX_NAMESPACE::TensorProto& SparseTensorProto::_internal_values() const {
  const ::ONNX_NAMESPACE::TensorProto* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorProto*>(
      &::ONNX_NAMESPACE::_TensorProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorProto& SparseTensorProto::values() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.SparseTensorProto.values)
  return _internal_values();
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::release_values() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.SparseTensorProto.values)
  _has_bits_[0] &= ~0x00000001u;
  ::ONNX_NAMESPACE::TensorProto* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::_internal_mutable_values() {
  _has_bits_[0] |= 0x00000001u;
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto>(GetArenaNoVirtual());
    values_ = p;
  }
  return values_;
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.SparseTensorProto.values)
  return _internal_mutable_values();
}
inline void SparseTensorProto::set_allocated_values(::ONNX_NAMESPACE::TensorProto* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.SparseTensorProto.values)
}

// optional .ONNX_NAMESPACE.TensorProto indices = 2;
inline bool SparseTensorProto::_internal_has_indices() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || indices_ != nullptr);
  return value;
}
inline bool SparseTensorProto::has_indices() const {
  return _internal_has_indices();
}
inline void SparseTensorProto::clear_indices() {
  if (indices_ != nullptr) indices_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ONNX_NAMESPACE::TensorProto& SparseTensorProto::_internal_indices() const {
  const ::ONNX_NAMESPACE::TensorProto* p = indices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorProto*>(
      &::ONNX_NAMESPACE::_TensorProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorProto& SparseTensorProto::indices() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.SparseTensorProto.indices)
  return _internal_indices();
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::release_indices() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.SparseTensorProto.indices)
  _has_bits_[0] &= ~0x00000002u;
  ::ONNX_NAMESPACE::TensorProto* temp = indices_;
  indices_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::_internal_mutable_indices() {
  _has_bits_[0] |= 0x00000002u;
  if (indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorProto>(GetArenaNoVirtual());
    indices_ = p;
  }
  return indices_;
}
inline ::ONNX_NAMESPACE::TensorProto* SparseTensorProto::mutable_indices() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.SparseTensorProto.indices)
  return _internal_mutable_indices();
}
inline void SparseTensorProto::set_allocated_indices(::ONNX_NAMESPACE::TensorProto* indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indices_;
  }
  if (indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indices_ = indices;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.SparseTensorProto.indices)
}

// repeated int64 dims = 3;
inline int SparseTensorProto::_internal_dims_size() const {
  return dims_.size();
}
inline int SparseTensorProto::dims_size() const {
  return _internal_dims_size();
}
inline void SparseTensorProto::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SparseTensorProto::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SparseTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.SparseTensorProto.dims)
  return _internal_dims(index);
}
inline void SparseTensorProto::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.SparseTensorProto.dims)
}
inline void SparseTensorProto::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Add(value);
}
inline void SparseTensorProto::add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.SparseTensorProto.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SparseTensorProto::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SparseTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.SparseTensorProto.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SparseTensorProto::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SparseTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.SparseTensorProto.dims)
  return _internal_mutable_dims();
}

// -------------------------------------------------------------------

// TensorShapeProto_Dimension

// optional int64 dim_value = 1;
inline bool TensorShapeProto_Dimension::_internal_has_dim_value() const {
  return value_case() == kDimValue;
}
inline bool TensorShapeProto_Dimension::has_dim_value() const {
  return _internal_has_dim_value();
}
inline void TensorShapeProto_Dimension::set_has_dim_value() {
  _oneof_case_[0] = kDimValue;
}
inline void TensorShapeProto_Dimension::clear_dim_value() {
  if (_internal_has_dim_value()) {
    value_.dim_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dimension::_internal_dim_value() const {
  if (_internal_has_dim_value()) {
    return value_.dim_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TensorShapeProto_Dimension::_internal_set_dim_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_dim_value()) {
    clear_value();
    set_has_dim_value();
  }
  value_.dim_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dimension::dim_value() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_value)
  return _internal_dim_value();
}
inline void TensorShapeProto_Dimension::set_dim_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dim_value(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_value)
}

// optional string dim_param = 2;
inline bool TensorShapeProto_Dimension::_internal_has_dim_param() const {
  return value_case() == kDimParam;
}
inline bool TensorShapeProto_Dimension::has_dim_param() const {
  return _internal_has_dim_param();
}
inline void TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}
inline void TensorShapeProto_Dimension::clear_dim_param() {
  if (_internal_has_dim_param()) {
    value_.dim_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& TensorShapeProto_Dimension::dim_param() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
  return _internal_dim_param();
}
inline void TensorShapeProto_Dimension::set_dim_param(const std::string& value) {
  _internal_set_dim_param(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
}
inline std::string* TensorShapeProto_Dimension::mutable_dim_param() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
  return _internal_mutable_dim_param();
}
inline const std::string& TensorShapeProto_Dimension::_internal_dim_param() const {
  if (_internal_has_dim_param()) {
    return value_.dim_param_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TensorShapeProto_Dimension::_internal_set_dim_param(const std::string& value) {
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorShapeProto_Dimension::set_dim_param(std::string&& value) {
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
}
inline void TensorShapeProto_Dimension::set_dim_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
}
inline void TensorShapeProto_Dimension::set_dim_param(const char* value, size_t size) {
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
}
inline std::string* TensorShapeProto_Dimension::_internal_mutable_dim_param() {
  if (!_internal_has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.dim_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorShapeProto_Dimension::release_dim_param() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
  if (_internal_has_dim_param()) {
    clear_has_value();
    return value_.dim_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TensorShapeProto_Dimension::set_allocated_dim_param(std::string* dim_param) {
  if (has_value()) {
    clear_value();
  }
  if (dim_param != nullptr) {
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(dim_param);
  }
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorShapeProto.Dimension.dim_param)
}

// optional string denotation = 3;
inline bool TensorShapeProto_Dimension::_internal_has_denotation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorShapeProto_Dimension::has_denotation() const {
  return _internal_has_denotation();
}
inline void TensorShapeProto_Dimension::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorShapeProto_Dimension::denotation() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
  return _internal_denotation();
}
inline void TensorShapeProto_Dimension::set_denotation(const std::string& value) {
  _internal_set_denotation(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
}
inline std::string* TensorShapeProto_Dimension::mutable_denotation() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
  return _internal_mutable_denotation();
}
inline const std::string& TensorShapeProto_Dimension::_internal_denotation() const {
  return denotation_.GetNoArena();
}
inline void TensorShapeProto_Dimension::_internal_set_denotation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TensorShapeProto_Dimension::set_denotation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
}
inline void TensorShapeProto_Dimension::set_denotation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
}
inline void TensorShapeProto_Dimension::set_denotation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
}
inline std::string* TensorShapeProto_Dimension::_internal_mutable_denotation() {
  _has_bits_[0] |= 0x00000001u;
  return denotation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorShapeProto_Dimension::release_denotation() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
  if (!_internal_has_denotation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return denotation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShapeProto_Dimension::set_allocated_denotation(std::string* denotation) {
  if (denotation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  denotation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TensorShapeProto.Dimension.denotation)
}

inline bool TensorShapeProto_Dimension::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TensorShapeProto_Dimension::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TensorShapeProto_Dimension::ValueCase TensorShapeProto_Dimension::value_case() const {
  return TensorShapeProto_Dimension::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TensorShapeProto

// repeated .ONNX_NAMESPACE.TensorShapeProto.Dimension dim = 1;
inline int TensorShapeProto::_internal_dim_size() const {
  return dim_.size();
}
inline int TensorShapeProto::dim_size() const {
  return _internal_dim_size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::ONNX_NAMESPACE::TensorShapeProto_Dimension* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorShapeProto_Dimension >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:ONNX_NAMESPACE.TensorShapeProto.dim)
  return &dim_;
}
inline const ::ONNX_NAMESPACE::TensorShapeProto_Dimension& TensorShapeProto::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline const ::ONNX_NAMESPACE::TensorShapeProto_Dimension& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TensorShapeProto.dim)
  return _internal_dim(index);
}
inline ::ONNX_NAMESPACE::TensorShapeProto_Dimension* TensorShapeProto::_internal_add_dim() {
  return dim_.Add();
}
inline ::ONNX_NAMESPACE::TensorShapeProto_Dimension* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:ONNX_NAMESPACE.TensorShapeProto.dim)
  return _internal_add_dim();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ONNX_NAMESPACE::TensorShapeProto_Dimension >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:ONNX_NAMESPACE.TensorShapeProto.dim)
  return dim_;
}

// -------------------------------------------------------------------

// TypeProto_Tensor

// optional int32 elem_type = 1;
inline bool TypeProto_Tensor::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeProto_Tensor::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void TypeProto_Tensor::clear_elem_type() {
  elem_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_Tensor::_internal_elem_type() const {
  return elem_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_Tensor::elem_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Tensor.elem_type)
  return _internal_elem_type();
}
inline void TypeProto_Tensor::_internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  elem_type_ = value;
}
inline void TypeProto_Tensor::set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.Tensor.elem_type)
}

// optional .ONNX_NAMESPACE.TensorShapeProto shape = 2;
inline bool TypeProto_Tensor::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool TypeProto_Tensor::has_shape() const {
  return _internal_has_shape();
}
inline void TypeProto_Tensor::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ONNX_NAMESPACE::TensorShapeProto& TypeProto_Tensor::_internal_shape() const {
  const ::ONNX_NAMESPACE::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorShapeProto*>(
      &::ONNX_NAMESPACE::_TensorShapeProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorShapeProto& TypeProto_Tensor::shape() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Tensor.shape)
  return _internal_shape();
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_Tensor::release_shape() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.Tensor.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::ONNX_NAMESPACE::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_Tensor::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  return shape_;
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.Tensor.shape)
  return _internal_mutable_shape();
}
inline void TypeProto_Tensor::set_allocated_shape(::ONNX_NAMESPACE::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.Tensor.shape)
}

// -------------------------------------------------------------------

// TypeProto_Sequence

// optional .ONNX_NAMESPACE.TypeProto elem_type = 1;
inline bool TypeProto_Sequence::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || elem_type_ != nullptr);
  return value;
}
inline bool TypeProto_Sequence::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void TypeProto_Sequence::clear_elem_type() {
  if (elem_type_ != nullptr) elem_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ONNX_NAMESPACE::TypeProto& TypeProto_Sequence::_internal_elem_type() const {
  const ::ONNX_NAMESPACE::TypeProto* p = elem_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TypeProto*>(
      &::ONNX_NAMESPACE::_TypeProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto& TypeProto_Sequence::elem_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Sequence.elem_type)
  return _internal_elem_type();
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Sequence::release_elem_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.Sequence.elem_type)
  _has_bits_[0] &= ~0x00000001u;
  ::ONNX_NAMESPACE::TypeProto* temp = elem_type_;
  elem_type_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Sequence::_internal_mutable_elem_type() {
  _has_bits_[0] |= 0x00000001u;
  if (elem_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto>(GetArenaNoVirtual());
    elem_type_ = p;
  }
  return elem_type_;
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Sequence::mutable_elem_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.Sequence.elem_type)
  return _internal_mutable_elem_type();
}
inline void TypeProto_Sequence::set_allocated_elem_type(::ONNX_NAMESPACE::TypeProto* elem_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete elem_type_;
  }
  if (elem_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      elem_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elem_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  elem_type_ = elem_type;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.Sequence.elem_type)
}

// -------------------------------------------------------------------

// TypeProto_Map

// optional int32 key_type = 1;
inline bool TypeProto_Map::_internal_has_key_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeProto_Map::has_key_type() const {
  return _internal_has_key_type();
}
inline void TypeProto_Map::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_Map::_internal_key_type() const {
  return key_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_Map::key_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Map.key_type)
  return _internal_key_type();
}
inline void TypeProto_Map::_internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_type_ = value;
}
inline void TypeProto_Map::set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.Map.key_type)
}

// optional .ONNX_NAMESPACE.TypeProto value_type = 2;
inline bool TypeProto_Map::_internal_has_value_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_type_ != nullptr);
  return value;
}
inline bool TypeProto_Map::has_value_type() const {
  return _internal_has_value_type();
}
inline void TypeProto_Map::clear_value_type() {
  if (value_type_ != nullptr) value_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ONNX_NAMESPACE::TypeProto& TypeProto_Map::_internal_value_type() const {
  const ::ONNX_NAMESPACE::TypeProto* p = value_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TypeProto*>(
      &::ONNX_NAMESPACE::_TypeProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto& TypeProto_Map::value_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Map.value_type)
  return _internal_value_type();
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Map::release_value_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.Map.value_type)
  _has_bits_[0] &= ~0x00000001u;
  ::ONNX_NAMESPACE::TypeProto* temp = value_type_;
  value_type_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Map::_internal_mutable_value_type() {
  _has_bits_[0] |= 0x00000001u;
  if (value_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TypeProto>(GetArenaNoVirtual());
    value_type_ = p;
  }
  return value_type_;
}
inline ::ONNX_NAMESPACE::TypeProto* TypeProto_Map::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.Map.value_type)
  return _internal_mutable_value_type();
}
inline void TypeProto_Map::set_allocated_value_type(::ONNX_NAMESPACE::TypeProto* value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_type_;
  }
  if (value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.Map.value_type)
}

// -------------------------------------------------------------------

// TypeProto_SparseTensor

// optional int32 elem_type = 1;
inline bool TypeProto_SparseTensor::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeProto_SparseTensor::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void TypeProto_SparseTensor::clear_elem_type() {
  elem_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_SparseTensor::_internal_elem_type() const {
  return elem_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypeProto_SparseTensor::elem_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.SparseTensor.elem_type)
  return _internal_elem_type();
}
inline void TypeProto_SparseTensor::_internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  elem_type_ = value;
}
inline void TypeProto_SparseTensor::set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.SparseTensor.elem_type)
}

// optional .ONNX_NAMESPACE.TensorShapeProto shape = 2;
inline bool TypeProto_SparseTensor::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool TypeProto_SparseTensor::has_shape() const {
  return _internal_has_shape();
}
inline void TypeProto_SparseTensor::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ONNX_NAMESPACE::TensorShapeProto& TypeProto_SparseTensor::_internal_shape() const {
  const ::ONNX_NAMESPACE::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ONNX_NAMESPACE::TensorShapeProto*>(
      &::ONNX_NAMESPACE::_TensorShapeProto_default_instance_);
}
inline const ::ONNX_NAMESPACE::TensorShapeProto& TypeProto_SparseTensor::shape() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.SparseTensor.shape)
  return _internal_shape();
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_SparseTensor::release_shape() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.SparseTensor.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::ONNX_NAMESPACE::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_SparseTensor::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::ONNX_NAMESPACE::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  return shape_;
}
inline ::ONNX_NAMESPACE::TensorShapeProto* TypeProto_SparseTensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.SparseTensor.shape)
  return _internal_mutable_shape();
}
inline void TypeProto_SparseTensor::set_allocated_shape(::ONNX_NAMESPACE::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.SparseTensor.shape)
}

// -------------------------------------------------------------------

// TypeProto_Opaque

// optional string domain = 1;
inline bool TypeProto_Opaque::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeProto_Opaque::has_domain() const {
  return _internal_has_domain();
}
inline void TypeProto_Opaque::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypeProto_Opaque::domain() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Opaque.domain)
  return _internal_domain();
}
inline void TypeProto_Opaque::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.Opaque.domain)
}
inline std::string* TypeProto_Opaque::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.Opaque.domain)
  return _internal_mutable_domain();
}
inline const std::string& TypeProto_Opaque::_internal_domain() const {
  return domain_.GetNoArena();
}
inline void TypeProto_Opaque::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TypeProto_Opaque::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TypeProto.Opaque.domain)
}
inline void TypeProto_Opaque::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TypeProto.Opaque.domain)
}
inline void TypeProto_Opaque::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TypeProto.Opaque.domain)
}
inline std::string* TypeProto_Opaque::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TypeProto_Opaque::release_domain() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.Opaque.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TypeProto_Opaque::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.Opaque.domain)
}

// optional string name = 2;
inline bool TypeProto_Opaque::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeProto_Opaque::has_name() const {
  return _internal_has_name();
}
inline void TypeProto_Opaque::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TypeProto_Opaque::name() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.Opaque.name)
  return _internal_name();
}
inline void TypeProto_Opaque::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.Opaque.name)
}
inline std::string* TypeProto_Opaque::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.Opaque.name)
  return _internal_mutable_name();
}
inline const std::string& TypeProto_Opaque::_internal_name() const {
  return name_.GetNoArena();
}
inline void TypeProto_Opaque::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TypeProto_Opaque::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TypeProto.Opaque.name)
}
inline void TypeProto_Opaque::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TypeProto.Opaque.name)
}
inline void TypeProto_Opaque::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TypeProto.Opaque.name)
}
inline std::string* TypeProto_Opaque::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TypeProto_Opaque::release_name() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.Opaque.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TypeProto_Opaque::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.Opaque.name)
}

// -------------------------------------------------------------------

// TypeProto

// optional .ONNX_NAMESPACE.TypeProto.Tensor tensor_type = 1;
inline bool TypeProto::_internal_has_tensor_type() const {
  return value_case() == kTensorType;
}
inline bool TypeProto::has_tensor_type() const {
  return _internal_has_tensor_type();
}
inline void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
inline void TypeProto::clear_tensor_type() {
  if (_internal_has_tensor_type()) {
    delete value_.tensor_type_;
    clear_has_value();
  }
}
inline ::ONNX_NAMESPACE::TypeProto_Tensor* TypeProto::release_tensor_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.tensor_type)
  if (_internal_has_tensor_type()) {
    clear_has_value();
      ::ONNX_NAMESPACE::TypeProto_Tensor* temp = value_.tensor_type_;
    value_.tensor_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ONNX_NAMESPACE::TypeProto_Tensor& TypeProto::_internal_tensor_type() const {
  return _internal_has_tensor_type()
      ? *value_.tensor_type_
      : *reinterpret_cast< ::ONNX_NAMESPACE::TypeProto_Tensor*>(&::ONNX_NAMESPACE::_TypeProto_Tensor_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto_Tensor& TypeProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.tensor_type)
  return _internal_tensor_type();
}
inline ::ONNX_NAMESPACE::TypeProto_Tensor* TypeProto::_internal_mutable_tensor_type() {
  if (!_internal_has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = CreateMaybeMessage< ::ONNX_NAMESPACE::TypeProto_Tensor >(
        GetArenaNoVirtual());
  }
  return value_.tensor_type_;
}
inline ::ONNX_NAMESPACE::TypeProto_Tensor* TypeProto::mutable_tensor_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.tensor_type)
  return _internal_mutable_tensor_type();
}

// optional .ONNX_NAMESPACE.TypeProto.Sequence sequence_type = 4;
inline bool TypeProto::_internal_has_sequence_type() const {
  return value_case() == kSequenceType;
}
inline bool TypeProto::has_sequence_type() const {
  return _internal_has_sequence_type();
}
inline void TypeProto::set_has_sequence_type() {
  _oneof_case_[0] = kSequenceType;
}
inline void TypeProto::clear_sequence_type() {
  if (_internal_has_sequence_type()) {
    delete value_.sequence_type_;
    clear_has_value();
  }
}
inline ::ONNX_NAMESPACE::TypeProto_Sequence* TypeProto::release_sequence_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.sequence_type)
  if (_internal_has_sequence_type()) {
    clear_has_value();
      ::ONNX_NAMESPACE::TypeProto_Sequence* temp = value_.sequence_type_;
    value_.sequence_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ONNX_NAMESPACE::TypeProto_Sequence& TypeProto::_internal_sequence_type() const {
  return _internal_has_sequence_type()
      ? *value_.sequence_type_
      : *reinterpret_cast< ::ONNX_NAMESPACE::TypeProto_Sequence*>(&::ONNX_NAMESPACE::_TypeProto_Sequence_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto_Sequence& TypeProto::sequence_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.sequence_type)
  return _internal_sequence_type();
}
inline ::ONNX_NAMESPACE::TypeProto_Sequence* TypeProto::_internal_mutable_sequence_type() {
  if (!_internal_has_sequence_type()) {
    clear_value();
    set_has_sequence_type();
    value_.sequence_type_ = CreateMaybeMessage< ::ONNX_NAMESPACE::TypeProto_Sequence >(
        GetArenaNoVirtual());
  }
  return value_.sequence_type_;
}
inline ::ONNX_NAMESPACE::TypeProto_Sequence* TypeProto::mutable_sequence_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.sequence_type)
  return _internal_mutable_sequence_type();
}

// optional .ONNX_NAMESPACE.TypeProto.Map map_type = 5;
inline bool TypeProto::_internal_has_map_type() const {
  return value_case() == kMapType;
}
inline bool TypeProto::has_map_type() const {
  return _internal_has_map_type();
}
inline void TypeProto::set_has_map_type() {
  _oneof_case_[0] = kMapType;
}
inline void TypeProto::clear_map_type() {
  if (_internal_has_map_type()) {
    delete value_.map_type_;
    clear_has_value();
  }
}
inline ::ONNX_NAMESPACE::TypeProto_Map* TypeProto::release_map_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.map_type)
  if (_internal_has_map_type()) {
    clear_has_value();
      ::ONNX_NAMESPACE::TypeProto_Map* temp = value_.map_type_;
    value_.map_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ONNX_NAMESPACE::TypeProto_Map& TypeProto::_internal_map_type() const {
  return _internal_has_map_type()
      ? *value_.map_type_
      : *reinterpret_cast< ::ONNX_NAMESPACE::TypeProto_Map*>(&::ONNX_NAMESPACE::_TypeProto_Map_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto_Map& TypeProto::map_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.map_type)
  return _internal_map_type();
}
inline ::ONNX_NAMESPACE::TypeProto_Map* TypeProto::_internal_mutable_map_type() {
  if (!_internal_has_map_type()) {
    clear_value();
    set_has_map_type();
    value_.map_type_ = CreateMaybeMessage< ::ONNX_NAMESPACE::TypeProto_Map >(
        GetArenaNoVirtual());
  }
  return value_.map_type_;
}
inline ::ONNX_NAMESPACE::TypeProto_Map* TypeProto::mutable_map_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.map_type)
  return _internal_mutable_map_type();
}

// optional .ONNX_NAMESPACE.TypeProto.SparseTensor sparse_tensor_type = 8;
inline bool TypeProto::_internal_has_sparse_tensor_type() const {
  return value_case() == kSparseTensorType;
}
inline bool TypeProto::has_sparse_tensor_type() const {
  return _internal_has_sparse_tensor_type();
}
inline void TypeProto::set_has_sparse_tensor_type() {
  _oneof_case_[0] = kSparseTensorType;
}
inline void TypeProto::clear_sparse_tensor_type() {
  if (_internal_has_sparse_tensor_type()) {
    delete value_.sparse_tensor_type_;
    clear_has_value();
  }
}
inline ::ONNX_NAMESPACE::TypeProto_SparseTensor* TypeProto::release_sparse_tensor_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.sparse_tensor_type)
  if (_internal_has_sparse_tensor_type()) {
    clear_has_value();
      ::ONNX_NAMESPACE::TypeProto_SparseTensor* temp = value_.sparse_tensor_type_;
    value_.sparse_tensor_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ONNX_NAMESPACE::TypeProto_SparseTensor& TypeProto::_internal_sparse_tensor_type() const {
  return _internal_has_sparse_tensor_type()
      ? *value_.sparse_tensor_type_
      : *reinterpret_cast< ::ONNX_NAMESPACE::TypeProto_SparseTensor*>(&::ONNX_NAMESPACE::_TypeProto_SparseTensor_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto_SparseTensor& TypeProto::sparse_tensor_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.sparse_tensor_type)
  return _internal_sparse_tensor_type();
}
inline ::ONNX_NAMESPACE::TypeProto_SparseTensor* TypeProto::_internal_mutable_sparse_tensor_type() {
  if (!_internal_has_sparse_tensor_type()) {
    clear_value();
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = CreateMaybeMessage< ::ONNX_NAMESPACE::TypeProto_SparseTensor >(
        GetArenaNoVirtual());
  }
  return value_.sparse_tensor_type_;
}
inline ::ONNX_NAMESPACE::TypeProto_SparseTensor* TypeProto::mutable_sparse_tensor_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.sparse_tensor_type)
  return _internal_mutable_sparse_tensor_type();
}

// optional .ONNX_NAMESPACE.TypeProto.Opaque opaque_type = 7;
inline bool TypeProto::_internal_has_opaque_type() const {
  return value_case() == kOpaqueType;
}
inline bool TypeProto::has_opaque_type() const {
  return _internal_has_opaque_type();
}
inline void TypeProto::set_has_opaque_type() {
  _oneof_case_[0] = kOpaqueType;
}
inline void TypeProto::clear_opaque_type() {
  if (_internal_has_opaque_type()) {
    delete value_.opaque_type_;
    clear_has_value();
  }
}
inline ::ONNX_NAMESPACE::TypeProto_Opaque* TypeProto::release_opaque_type() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.opaque_type)
  if (_internal_has_opaque_type()) {
    clear_has_value();
      ::ONNX_NAMESPACE::TypeProto_Opaque* temp = value_.opaque_type_;
    value_.opaque_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ONNX_NAMESPACE::TypeProto_Opaque& TypeProto::_internal_opaque_type() const {
  return _internal_has_opaque_type()
      ? *value_.opaque_type_
      : *reinterpret_cast< ::ONNX_NAMESPACE::TypeProto_Opaque*>(&::ONNX_NAMESPACE::_TypeProto_Opaque_default_instance_);
}
inline const ::ONNX_NAMESPACE::TypeProto_Opaque& TypeProto::opaque_type() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.opaque_type)
  return _internal_opaque_type();
}
inline ::ONNX_NAMESPACE::TypeProto_Opaque* TypeProto::_internal_mutable_opaque_type() {
  if (!_internal_has_opaque_type()) {
    clear_value();
    set_has_opaque_type();
    value_.opaque_type_ = CreateMaybeMessage< ::ONNX_NAMESPACE::TypeProto_Opaque >(
        GetArenaNoVirtual());
  }
  return value_.opaque_type_;
}
inline ::ONNX_NAMESPACE::TypeProto_Opaque* TypeProto::mutable_opaque_type() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.opaque_type)
  return _internal_mutable_opaque_type();
}

// optional string denotation = 6;
inline bool TypeProto::_internal_has_denotation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeProto::has_denotation() const {
  return _internal_has_denotation();
}
inline void TypeProto::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypeProto::denotation() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.TypeProto.denotation)
  return _internal_denotation();
}
inline void TypeProto::set_denotation(const std::string& value) {
  _internal_set_denotation(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.TypeProto.denotation)
}
inline std::string* TypeProto::mutable_denotation() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.TypeProto.denotation)
  return _internal_mutable_denotation();
}
inline const std::string& TypeProto::_internal_denotation() const {
  return denotation_.GetNoArena();
}
inline void TypeProto::_internal_set_denotation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TypeProto::set_denotation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.TypeProto.denotation)
}
inline void TypeProto::set_denotation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.TypeProto.denotation)
}
inline void TypeProto::set_denotation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  denotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.TypeProto.denotation)
}
inline std::string* TypeProto::_internal_mutable_denotation() {
  _has_bits_[0] |= 0x00000001u;
  return denotation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TypeProto::release_denotation() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.TypeProto.denotation)
  if (!_internal_has_denotation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return denotation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TypeProto::set_allocated_denotation(std::string* denotation) {
  if (denotation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  denotation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.TypeProto.denotation)
}

inline bool TypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OperatorSetIdProto

// optional string domain = 1;
inline bool OperatorSetIdProto::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperatorSetIdProto::has_domain() const {
  return _internal_has_domain();
}
inline void OperatorSetIdProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperatorSetIdProto::domain() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.OperatorSetIdProto.domain)
  return _internal_domain();
}
inline void OperatorSetIdProto::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.OperatorSetIdProto.domain)
}
inline std::string* OperatorSetIdProto::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:ONNX_NAMESPACE.OperatorSetIdProto.domain)
  return _internal_mutable_domain();
}
inline const std::string& OperatorSetIdProto::_internal_domain() const {
  return domain_.GetNoArena();
}
inline void OperatorSetIdProto::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OperatorSetIdProto::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ONNX_NAMESPACE.OperatorSetIdProto.domain)
}
inline void OperatorSetIdProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ONNX_NAMESPACE.OperatorSetIdProto.domain)
}
inline void OperatorSetIdProto::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ONNX_NAMESPACE.OperatorSetIdProto.domain)
}
inline std::string* OperatorSetIdProto::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OperatorSetIdProto::release_domain() {
  // @@protoc_insertion_point(field_release:ONNX_NAMESPACE.OperatorSetIdProto.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorSetIdProto::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:ONNX_NAMESPACE.OperatorSetIdProto.domain)
}

// optional int64 version = 2;
inline bool OperatorSetIdProto::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperatorSetIdProto::has_version() const {
  return _internal_has_version();
}
inline void OperatorSetIdProto::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperatorSetIdProto::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OperatorSetIdProto::version() const {
  // @@protoc_insertion_point(field_get:ONNX_NAMESPACE.OperatorSetIdProto.version)
  return _internal_version();
}
inline void OperatorSetIdProto::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void OperatorSetIdProto::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ONNX_NAMESPACE.OperatorSetIdProto.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ONNX_NAMESPACE

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ONNX_NAMESPACE::AttributeProto_AttributeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ONNX_NAMESPACE::AttributeProto_AttributeType>() {
  return ::ONNX_NAMESPACE::AttributeProto_AttributeType_descriptor();
}
template <> struct is_proto_enum< ::ONNX_NAMESPACE::TensorProto_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ONNX_NAMESPACE::TensorProto_DataType>() {
  return ::ONNX_NAMESPACE::TensorProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::ONNX_NAMESPACE::TensorProto_DataLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ONNX_NAMESPACE::TensorProto_DataLocation>() {
  return ::ONNX_NAMESPACE::TensorProto_DataLocation_descriptor();
}
template <> struct is_proto_enum< ::ONNX_NAMESPACE::Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ONNX_NAMESPACE::Version>() {
  return ::ONNX_NAMESPACE::Version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_5fONNX_5fNAMESPACE_2dml_2eproto
